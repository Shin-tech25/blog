{"version":3,"file":"component---src-pages-contact-js-5e1bc64d9f4b8b07899e.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://gatsby-starter-blog/./src/styles/contact.module.css","webpack://gatsby-starter-blog/./src/pages/contact.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? []\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","// extracted by mini-css-extract-plugin\nexport var container = \"contact-module--container--4d202\";\nexport var error = \"contact-module--error--7c551\";\nexport var form = \"contact-module--form--400a0\";\nexport var formGroup = \"contact-module--formGroup--82cd8\";\nexport var intro = \"contact-module--intro--c61d0\";\nexport var submitButton = \"contact-module--submitButton--ba1f6\";","import React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport * as styles from \"../styles/contact.module.css\"\n\nconst ContactPage = ({ location }) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm()\n\n  const onSubmit = async data => {\n    try {\n      console.log(\"Sending data:\", data)\n\n      const response = await fetch(process.env.GATSBY_CONTACT_FORM_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n\n      console.log(\"Response status:\", response.status)\n\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\")\n      }\n\n      const result = await response.json()\n      console.log(\"Response data:\", result)\n      alert(result.message)\n      reset() // フォームをリセット\n    } catch (error) {\n      console.error(\"There was a problem with the fetch operation:\", error)\n      alert(\"お問い合わせの送信中にエラーが発生しました。\")\n    }\n  }\n\n  return (\n    <Layout location={location}>\n      <Seo title=\"Contact\" />\n      <p className={styles.intro}>\n        お仕事の依頼や記事に関することなどは以下のフォームからどうぞ。\n      </p>\n      <div className={styles.container}>\n        <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"name\">Name</label>\n            <input\n              id=\"name\"\n              type=\"text\"\n              {...register(\"name\", { required: \"Name is required\" })}\n            />\n            {errors.name && (\n              <p className={styles.error}>{errors.name.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"email\">Email</label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              {...register(\"email\", {\n                required: \"Email is required\",\n                pattern: {\n                  value: /^\\S+@\\S+$/i,\n                  message: \"Invalid email address\",\n                },\n              })}\n            />\n            {errors.email && (\n              <p className={styles.error}>{errors.email.message}</p>\n            )}\n          </div>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"message\">Message</label>\n            <textarea\n              id=\"message\"\n              rows=\"6\"\n              {...register(\"message\", { required: \"Message is required\" })}\n            />\n            {errors.message && (\n              <p className={styles.error}>{errors.message.message}</p>\n            )}\n          </div>\n          <button type=\"submit\" className={styles.submitButton}>\n            Submit\n          </button>\n        </form>\n      </div>\n    </Layout>\n  )\n}\n\nexport default ContactPage\n\nexport const Head = () => <Seo title=\"Contact\" />\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","name","content","property","social","twitter","isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","_formValues","shouldUnregister","_state","unMount","array","timer","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","formGroup","location","_formControl","_values","useForm","Layout","Seo","className","console","log","response","fetch","process","headers","body","JSON","stringify","status","ok","Error","json","alert","styles","htmlFor","assign","id","email","rows","Head"],"sourceRoot":""}