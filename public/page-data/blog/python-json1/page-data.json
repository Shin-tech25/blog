{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-json1/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"8aa80dd6-8386-5f3c-a56b-f695f3a3b259","excerpt":"1. JSON とは JSON (JavaScript Object Notation) は、データをテキスト形式で表現する方法の一つです。JavaScript…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-json-%E3%81%A8%E3%81%AF\">1. JSON とは</a></p>\n</li>\n<li>\n<p><a href=\"#2-python-%E3%81%A7%E3%81%AE-json-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\">2. Python での JSON エンコード・デコード</a></p>\n<ul>\n<li><a href=\"#21-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89python--json\">2.1 エンコード（Python → JSON）</a></li>\n<li><a href=\"#22-%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89json--python\">2.2 デコード（JSON → Python）</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D\">3. JSON ファイルの読み書き</a></p>\n<ul>\n<li><a href=\"#31-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%B8%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\">3.1 JSON ファイルへの書き込み</a></li>\n<li><a href=\"#32-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">3.2 JSON ファイルの読み込み</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-json-%E3%81%A7%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E5%BF%9C%E7%94%A8%E4%BE%8B\">4. JSON でよくある応用例</a></p>\n<ul>\n<li><a href=\"#41-web-api-%E3%81%AE%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E8%A7%A3%E6%9E%90\">4.1 Web API のレスポンス解析</a></li>\n<li><a href=\"#42-cli-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E5%88%A9%E7%94%A8\">4.2 CLI ツールとしての利用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-json-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95\">5. JSON エンコード時のエラーと対処法</a></p>\n<ul>\n<li><a href=\"#51-typeerror-%E3%81%AE%E5%9B%9E%E9%81%BF%E6%96%B9%E6%B3%95\">5.1 TypeError の回避方法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#6-%E3%81%BE%E3%81%A8%E3%82%81\">6. まとめ</a></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\">参考リンク</a></li>\n</ul>\n</li>\n</ul>","html":"<h2 id=\"1-json-とは\" style=\"position:relative;\"><a href=\"#1-json-%E3%81%A8%E3%81%AF\" aria-label=\"1 json とは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JSON とは</h2>\n<p><strong>JSON (JavaScript Object Notation)</strong> は、データをテキスト形式で表現する方法の一つです。JavaScript のオブジェクト表記をもとに考案されましたが、現在では多くのプログラミング言語で扱えるようになっており、データ交換や設定ファイルなど幅広い用途で利用されています。</p>\n<p>JSON の大きな特徴は、キーと値の組み合わせ（オブジェクト）や配列を組み合わせるだけで、複雑な構造のデータをシンプルに表現できる点です。さらに、テキスト形式のため可読性が高く、人間が直接ファイルを開いて確認・編集しやすいというメリットがあります。<br>\n最近では MySQL 5.7 以降や MongoDB のように、JSON 型をネイティブで扱えるデータベースも増えています。</p>\n<h2 id=\"2-python-での-json-エンコードデコード\" style=\"position:relative;\"><a href=\"#2-python-%E3%81%A7%E3%81%AE-json-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"2 python での json エンコードデコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Python での JSON エンコード・デコード</h2>\n<p>Python では、標準ライブラリとして提供されている <code class=\"language-text\">json</code> モジュールを使うことで、JSON 形式のデータを手軽に扱えます。主に “Python のオブジェクトを JSON 文字列に変換（エンコード）” する処理と、その逆の “JSON 文字列を Python のオブジェクトに変換（デコード）” する処理が簡単に行えます。</p>\n<h3 id=\"21-エンコードpython--json\" style=\"position:relative;\"><a href=\"#21-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89python--json\" aria-label=\"21 エンコードpython  json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 エンコード（Python → JSON）</h3>\n<p>Python の辞書やリストなどのオブジェクトを JSON 形式に変換するには、<code class=\"language-text\">json.dumps()</code> 関数を使います。以下は簡単な例です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n<span class=\"token comment\"># Pythonの辞書をJSON文字列に変換する例</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"entities\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"urls\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hashtags\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mytag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pythontag\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"example_user\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\njson_str <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文字列として出力される</span></code></pre></div>\n<p>このとき、<code class=\"language-text\">json_str</code> は JSON 形式の文字列になっています。見やすく整形したい場合は、<code class=\"language-text\">indent</code> オプションでインデントを設定したり、<code class=\"language-text\">sort_keys=True</code> を指定してキーの順番をソートすることもできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">json_str_pretty <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json_str_pretty<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"22-デコードjson--python\" style=\"position:relative;\"><a href=\"#22-%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89json--python\" aria-label=\"22 デコードjson  python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 デコード（JSON → Python）</h3>\n<p>JSON 文字列を Python の辞書やリストなどに変換するには、<code class=\"language-text\">json.loads()</code> 関数を使います。たとえば、以下のような JSON 文字列を読み込んでみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\njson_str <span class=\"token operator\">=</span> <span class=\"token string\">'{\"id\": 123, \"entities\": {\"hashtags\": [\"python\", \"pythontips\"], \"user\": \"someone\"}}'</span>\npython_obj <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>python_obj<span class=\"token punctuation\">)</span></code></pre></div>\n<p>実行すると、Python の辞書として <code class=\"language-text\">{'id': 123, 'entities': {'hashtags': ['python', 'pythontips'], 'user': 'someone'}}</code> のような形で読み込まれます。なお、数値をすべて <code class=\"language-text\">Decimal</code> 型で読み込みたいときなどは、<code class=\"language-text\">parse_float=Decimal</code> のようにオプションを指定することで、変換先を自由にカスタマイズできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> decimal <span class=\"token keyword\">import</span> Decimal\n\njson_str <span class=\"token operator\">=</span> <span class=\"token string\">'[1, 2.5, \"text\", null, true]'</span>\nloaded_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">,</span> parse_float<span class=\"token operator\">=</span>Decimal<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>loaded_data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 出力例: [1, Decimal('2.5'), 'text', None, True]</span></code></pre></div>\n<h2 id=\"3-json-ファイルの読み書き\" style=\"position:relative;\"><a href=\"#3-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D\" aria-label=\"3 json ファイルの読み書き permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. JSON ファイルの読み書き</h2>\n<p>JSON はファイルに保存されることが多く、Python ではファイル操作を行う際に <code class=\"language-text\">json.dump()</code> や <code class=\"language-text\">json.load()</code> を使うのが便利です。文字列を直接扱う <code class=\"language-text\">json.dumps()</code> / <code class=\"language-text\">json.loads()</code> と似ていますが、引数にファイルオブジェクトを渡す点が異なります。</p>\n<h3 id=\"31-json-ファイルへの書き込み\" style=\"position:relative;\"><a href=\"#31-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%B8%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\" aria-label=\"31 json ファイルへの書き込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 JSON ファイルへの書き込み</h3>\n<p>たとえば、辞書形式のデータを JSON ファイルに保存する場合は、次のように書きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"example_user\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"items\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ここで <code class=\"language-text\">indent=2</code> を指定すると、改行とインデントが入った読みやすい JSON 形式で書き込まれます。また、<code class=\"language-text\">ensure_ascii=False</code> を指定すると、日本語などの非 ASCII 文字もそのまま表示されるので、文字化けを防ぎたいときに便利です。</p>\n<h3 id=\"32-json-ファイルの読み込み\" style=\"position:relative;\"><a href=\"#32-json-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\" aria-label=\"32 json ファイルの読み込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 JSON ファイルの読み込み</h3>\n<p>逆に、ファイルから JSON を読み込む場合は <code class=\"language-text\">json.load()</code> を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    loaded_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>loaded_data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">json.loads()</code> は文字列を引数に取る関数なので、ファイル全体を文字列として読み込んでから <code class=\"language-text\">json.loads()</code> を使う方法もありますが、<code class=\"language-text\">json.load()</code> を使うほうがシンプルです。</p>\n<h2 id=\"4-json-でよくある応用例\" style=\"position:relative;\"><a href=\"#4-json-%E3%81%A7%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E5%BF%9C%E7%94%A8%E4%BE%8B\" aria-label=\"4 json でよくある応用例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. JSON でよくある応用例</h2>\n<h3 id=\"41-web-api-のレスポンス解析\" style=\"position:relative;\"><a href=\"#41-web-api-%E3%81%AE%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E8%A7%A3%E6%9E%90\" aria-label=\"41 web api のレスポンス解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 Web API のレスポンス解析</h3>\n<p>多くの Web API は、レスポンスを JSON 形式で返してきます。Python では <code class=\"language-text\">requests</code> モジュールなどを使って API にアクセスし、その結果を <code class=\"language-text\">json.loads()</code> あるいは <code class=\"language-text\">response.json()</code> で処理するのが一般的です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.example.com/data\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># json.loads(response.text) と同等</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>このように取得したデータは、そのまま Python の辞書やリストとして扱えるため、後続の処理をスムーズに行えます。</p>\n<h3 id=\"42-cli-ツールとしての利用\" style=\"position:relative;\"><a href=\"#42-cli-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E5%88%A9%E7%94%A8\" aria-label=\"42 cli ツールとしての利用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 CLI ツールとしての利用</h3>\n<p><code class=\"language-text\">curl</code> や <code class=\"language-text\">httpie</code> などのコマンドラインツールで JSON データを取得し、Python スクリプトにパイプで渡して解析する、という使い方もよく見かけます。大規模なログ処理やバッチ処理でも、JSON は軽量なフォーマットとして重宝されます。</p>\n<h2 id=\"5-json-エンコード時のエラーと対処法\" style=\"position:relative;\"><a href=\"#5-json-%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95\" aria-label=\"5 json エンコード時のエラーと対処法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. JSON エンコード時のエラーと対処法</h2>\n<p><code class=\"language-text\">json.dumps()</code> を使って Python のオブジェクトをエンコードしようとしたとき、たとえば <code class=\"language-text\">datetime</code> オブジェクトや <code class=\"language-text\">Decimal</code> オブジェクトなど、標準ではサポートされていない型が含まれていると <code class=\"language-text\">TypeError</code> が発生します。</p>\n<h3 id=\"51-typeerror-の回避方法\" style=\"position:relative;\"><a href=\"#51-typeerror-%E3%81%AE%E5%9B%9E%E9%81%BF%E6%96%B9%E6%B3%95\" aria-label=\"51 typeerror の回避方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 TypeError の回避方法</h3>\n<p>このようなエラーを回避するには、<code class=\"language-text\">default</code> パラメータを利用して、標準ではシリアライズできないオブジェクトをどのように変換するかを定義します。次の例では、<code class=\"language-text\">datetime</code> オブジェクトを ISO 8601 形式の文字列に変換するようカスタマイズしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">default_converter</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> datetime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Type </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> not serializable\"</span></span><span class=\"token punctuation\">)</span>\n\ndata_with_datetime <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"created_at\"</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\njson_str <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data_with_datetime<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>default_converter<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">)</span></code></pre></div>\n<p>これで、<code class=\"language-text\">datetime</code> が含まれていても問題なくエンコードできます。他の独自クラスや型を扱う場合も、同じように <code class=\"language-text\">default</code> を使って独自のシリアライズ方法を定義すれば対応可能です。</p>\n<h2 id=\"6-まとめ\" style=\"position:relative;\"><a href=\"#6-%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"6 まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. まとめ</h2>\n<p>JSON は、軽量で可読性に優れたデータ形式として、Web API から設定ファイルまで幅広く使われています。Python では標準ライブラリの <code class=\"language-text\">json</code> モジュールを使うだけで、エンコード（Python → JSON）とデコード（JSON → Python）をとても簡単に実装できます。さらに、<code class=\"language-text\">dump</code> / <code class=\"language-text\">load</code> を活用すればファイル操作もシンプルに行えるため、ログの書き出しやデータの保存・読み込みなど、さまざまな場面で活用できるでしょう。</p>\n<p>もし JSON エンコード時に <code class=\"language-text\">TypeError</code> が発生する場合は、<code class=\"language-text\">default</code> パラメータでカスタム変換ロジックを用意するとスムーズです。XML と比較すると扱いやすく、軽量なフォーマットであることから、現代の Web システムやマイクロサービスの連携において JSON はますます欠かせない存在になっています。興味があれば、公式ドキュメントを参考にさらに深掘りしてみてください。</p>\n<h3 id=\"参考リンク\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\" aria-label=\"参考リンク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考リンク</h3>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/json.html\">公式ドキュメント: json — JSON encoder and decoder</a></li>\n</ul>\n<p>以上が、JSON の概要と Python での基本的な活用方法です。自分のプロジェクトでも試してみると、コードの可読性やデータ交換のしやすさを実感できるはずです。</p>","frontmatter":{"title":"Pythonで始めるJSON入門：基本からファイル操作、Web API活用まで","date":"2025-02-28","description":"この記事では、JSONの基本概念からPythonを使ったエンコード・デコード、ファイル操作、そしてWeb APIとの連携方法について、実例を交えて分かりやすく解説します。","tags":["Python","JSON","WebAPI"],"featuredImage":{"publicURL":"/static/07758e24f5d5bc9c6a17cc7722c80477/python3.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg","srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/19e71/python3.jpg 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/68974/python3.jpg 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/6766a/python3.webp 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/22bfc/python3.webp 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/d689f/python3.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[]},"previous":{"fields":{"slug":"/python-enum2/"},"frontmatter":{"title":"PythonのEnumを用いて複数ステータスをビット演算で管理する"}},"next":{"fields":{"slug":"/python-configparser/"},"frontmatter":{"title":"Pythonによる設定管理 - configparser"}}},"pageContext":{"id":"8aa80dd6-8386-5f3c-a56b-f695f3a3b259","previousPostId":"e9d4280e-abbf-5594-99ac-dc7c35ffe247","nextPostId":"12b8faec-2926-5f41-a174-047e95d88b1a","relatedPosts":[]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}