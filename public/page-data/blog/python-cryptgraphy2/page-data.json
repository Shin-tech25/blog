{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-cryptgraphy2/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"34c7cf0d-03af-5a30-bfc8-ce4632a8ca17","excerpt":"…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%AC%E9%96%8B%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E5%AE%9F%E8%B7%B5\">公開鍵暗号化の実践</a></p>\n<ul>\n<li><a href=\"#1-code-classlanguage-textcryptographycode-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">1. <code class=\"language-text\">cryptography</code> ライブラリのインストール</a></li>\n<li><a href=\"#2-%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A8%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%AE%E7%94%9F%E6%88%90\">2. 秘密鍵と公開鍵の生成</a></li>\n<li><a href=\"#3-%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96\">3. 公開鍵でデータの暗号化</a></li>\n<li><a href=\"#4-%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BE%A9%E5%8F%B7\">4. 秘密鍵でデータの復号</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%85%AC%E9%96%8B%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9\">公開鍵暗号化のメリットと注意点</a></p>\n<ul>\n<li><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">メリット</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\">注意点</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E4%BE%8B%E3%81%BE%E3%81%A8%E3%82%81\">実践的なコード例まとめ</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n</li>\n</ul>","html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<p>公開鍵暗号化方式（非対称鍵暗号）では、暗号化と復号に異なる鍵（公開鍵と秘密鍵）を使用します。この方式では、公開鍵を使ってデータを暗号化し、秘密鍵でそのデータを復号します。公開鍵は自由に配布可能ですが、秘密鍵は所有者が厳重に保管する必要があります。</p>\n<p>公開鍵暗号化の利点は、暗号化に使う鍵（公開鍵）が他者と共有できるため、鍵の配布問題が解決されることです。しかし、共通鍵暗号化方式と比べて、暗号化と復号に時間がかかるため、大量のデータを扱う場合には処理速度が遅くなるという欠点があります。</p>\n<p>本記事では、<code class=\"language-text\">cryptography</code> ライブラリを使用して公開鍵暗号化を行う方法を、実践的なコード例を交えて解説します。</p>\n<h2 id=\"公開鍵暗号化の実践\" style=\"position:relative;\"><a href=\"#%E5%85%AC%E9%96%8B%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E5%AE%9F%E8%B7%B5\" aria-label=\"公開鍵暗号化の実践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>公開鍵暗号化の実践</h2>\n<p>公開鍵暗号化を行うためには、まず公開鍵と秘密鍵のペアを生成する必要があります。<code class=\"language-text\">cryptography</code> ライブラリでは、<code class=\"language-text\">hazmat</code> モジュールを使用して RSA 鍵ペアを生成し、公開鍵でデータを暗号化、秘密鍵で復号することができます。</p>\n<p>以下に、公開鍵暗号化の実装例を示します。</p>\n<h3 id=\"1-code-classlanguage-textcryptographycode-ライブラリのインストール\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textcryptographycode-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"1 code classlanguage textcryptographycode ライブラリのインストール permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">cryptography</code> ライブラリのインストール</h3>\n<p>まずは、<code class=\"language-text\">cryptography</code> ライブラリをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> cryptography</code></pre></div>\n<h3 id=\"2-秘密鍵と公開鍵の生成\" style=\"position:relative;\"><a href=\"#2-%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A8%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%AE%E7%94%9F%E6%88%90\" aria-label=\"2 秘密鍵と公開鍵の生成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 秘密鍵と公開鍵の生成</h3>\n<p>公開鍵暗号化方式では、秘密鍵と公開鍵をペアで生成します。<code class=\"language-text\">cryptography</code> ライブラリの <code class=\"language-text\">hazmat</code> モジュールを使用して、RSA 方式で鍵ペアを生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> rsa\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n\n<span class=\"token comment\"># 秘密鍵の生成</span>\nprivate_key <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n    public_exponent<span class=\"token operator\">=</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>\n    key_size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    backend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 公開鍵の取得</span>\npublic_key <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Generated Public Key: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>public_key<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このコードでは、RSA の秘密鍵を生成し、<code class=\"language-text\">public_key()</code> メソッドを使って対応する公開鍵を取得しています。生成した鍵は、暗号化や復号の操作に使用されます。</p>\n<h3 id=\"3-公開鍵でデータの暗号化\" style=\"position:relative;\"><a href=\"#3-%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96\" aria-label=\"3 公開鍵でデータの暗号化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 公開鍵でデータの暗号化</h3>\n<p>公開鍵を使用してデータを暗号化するには、<code class=\"language-text\">encrypt()</code> メソッドを使用します。暗号化には、<code class=\"language-text\">OAEP</code>（Optimal Asymmetric Encryption Padding）というパディング方式を使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> hashes\n\n<span class=\"token comment\"># 暗号化するデータ</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">b\"encrypted data\"</span>\n\n<span class=\"token comment\"># 公開鍵で暗号化</span>\ncipher_text <span class=\"token operator\">=</span> public_key<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>\n    message<span class=\"token punctuation\">,</span>\n    padding<span class=\"token punctuation\">.</span>OAEP<span class=\"token punctuation\">(</span>\n        mgf<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">.</span>MGF1<span class=\"token punctuation\">(</span>algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Encrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cipher_text<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ここでは、公開鍵を使用してメッセージを暗号化しています。<code class=\"language-text\">OAEP</code>パディングと SHA256 ハッシュアルゴリズムを使用して、セキュリティを高めています。</p>\n<h3 id=\"4-秘密鍵でデータの復号\" style=\"position:relative;\"><a href=\"#4-%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BE%A9%E5%8F%B7\" aria-label=\"4 秘密鍵でデータの復号 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 秘密鍵でデータの復号</h3>\n<p>暗号化されたデータを復号するには、秘密鍵の <code class=\"language-text\">decrypt()</code> メソッドを使用します。復号も、暗号化時と同様に<code class=\"language-text\">OAEP</code>パディングと SHA256 を使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 秘密鍵で復号</span>\nplain_text <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>\n    cipher_text<span class=\"token punctuation\">,</span>\n    padding<span class=\"token punctuation\">.</span>OAEP<span class=\"token punctuation\">(</span>\n        mgf<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">.</span>MGF1<span class=\"token punctuation\">(</span>algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Decrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>plain_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このコードでは、秘密鍵を使用して暗号化されたメッセージを復号し、元のメッセージを取り戻しています。</p>\n<h2 id=\"公開鍵暗号化のメリットと注意点\" style=\"position:relative;\"><a href=\"#%E5%85%AC%E9%96%8B%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"公開鍵暗号化のメリットと注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>公開鍵暗号化のメリットと注意点</h2>\n<h3 id=\"メリット\" style=\"position:relative;\"><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\" aria-label=\"メリット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メリット</h3>\n<ul>\n<li><strong>鍵の配布が容易</strong>：公開鍵は自由に配布可能であり、秘密鍵は安全に保管されます。そのため、鍵の配布問題が解決されます。</li>\n<li><strong>安全な通信</strong>：公開鍵暗号化を使用すると、送信者と受信者の間で安全に通信ができます。公開鍵で暗号化したメッセージは、対応する秘密鍵でのみ復号できます。</li>\n</ul>\n<h3 id=\"注意点\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意点</h3>\n<ul>\n<li><strong>処理速度の遅さ</strong>：共通鍵暗号化に比べて、公開鍵暗号化は暗号化と復号に時間がかかります。大量のデータを暗号化する際にはパフォーマンスが低下する可能性があります。</li>\n<li><strong>鍵の管理</strong>：公開鍵と秘密鍵を安全に管理することが重要です。特に秘密鍵は漏洩しないようにしっかりと管理しなければなりません。</li>\n</ul>\n<h2 id=\"実践的なコード例まとめ\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E4%BE%8B%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"実践的なコード例まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実践的なコード例まとめ</h2>\n<p>以下は、公開鍵暗号化と復号化のコード例をまとめたものです。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> rsa\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> hashes\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n\n<span class=\"token comment\"># 秘密鍵の生成</span>\nprivate_key <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n    public_exponent<span class=\"token operator\">=</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>\n    key_size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    backend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 公開鍵の取得</span>\npublic_key <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 暗号化するデータ</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">b\"encrypted data\"</span>\n\n<span class=\"token comment\"># 公開鍵で暗号化</span>\ncipher_text <span class=\"token operator\">=</span> public_key<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>\n    message<span class=\"token punctuation\">,</span>\n    padding<span class=\"token punctuation\">.</span>OAEP<span class=\"token punctuation\">(</span>\n        mgf<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">.</span>MGF1<span class=\"token punctuation\">(</span>algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 秘密鍵で復号</span>\nplain_text <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>\n    cipher_text<span class=\"token punctuation\">,</span>\n    padding<span class=\"token punctuation\">.</span>OAEP<span class=\"token punctuation\">(</span>\n        mgf<span class=\"token operator\">=</span>padding<span class=\"token punctuation\">.</span>MGF1<span class=\"token punctuation\">(</span>algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">=</span><span class=\"token boolean\">None</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Decrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>plain_text<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code class=\"language-text\">cryptography</code> ライブラリを使用して公開鍵暗号化を行う方法について解説しました。公開鍵暗号化は、セキュリティを確保しつつ、安全に通信するために不可欠な技術です。鍵の管理に関しては注意が必要ですが、公開鍵と秘密鍵を適切に使用することで、安全で効率的な通信が可能になります。実践的なコード例を参考にして、公開鍵暗号化の実装を進めてください。</p>","frontmatter":{"title":"Pythonによる公開鍵暗号化方式 - cryptography","date":"2025-02-15","description":"Pythonで公開鍵暗号化方式を実装するためにcryptographyライブラリを使用した方法を解説します。実際のコード例を通して、公開鍵と秘密鍵を利用した暗号化、復号化を学びます。","tags":["Python","暗号化","cryptography","セキュリティ"],"featuredImage":{"publicURL":"/static/becfdfbe97644644be53ae4b70532f68/security.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg","srcSet":"/static/becfdfbe97644644be53ae4b70532f68/19e71/security.jpg 128w,\n/static/becfdfbe97644644be53ae4b70532f68/68974/security.jpg 256w,\n/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/becfdfbe97644644be53ae4b70532f68/6766a/security.webp 128w,\n/static/becfdfbe97644644be53ae4b70532f68/22bfc/security.webp 256w,\n/static/becfdfbe97644644be53ae4b70532f68/d689f/security.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[{"fields":{"slug":"/python-cryptgraphy1/"},"frontmatter":{"title":"Pythonによる共通鍵暗号化方式 - cryptography","date":"2025-02-14","tags":["Python","暗号化","cryptography","セキュリティ"],"description":"Pythonで共通鍵暗号化方式を実装するためにcryptographyライブラリを使用した方法を解説します。実際のコード例を通して、暗号化、復号化を学びます。","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg","srcSet":"/static/becfdfbe97644644be53ae4b70532f68/19e71/security.jpg 128w,\n/static/becfdfbe97644644be53ae4b70532f68/68974/security.jpg 256w,\n/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/becfdfbe97644644be53ae4b70532f68/6766a/security.webp 128w,\n/static/becfdfbe97644644be53ae4b70532f68/22bfc/security.webp 256w,\n/static/becfdfbe97644644be53ae4b70532f68/d689f/security.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}}]},"previous":{"fields":{"slug":"/python-cryptgraphy1/"},"frontmatter":{"title":"Pythonによる共通鍵暗号化方式 - cryptography"}},"next":{"fields":{"slug":"/python-traceback/"},"frontmatter":{"title":"Pythonでスタックトレースを扱う - traceback"}}},"pageContext":{"id":"34c7cf0d-03af-5a30-bfc8-ce4632a8ca17","previousPostId":"cffe2b08-0dcb-5678-90ff-8a30b0aff337","nextPostId":"53a0b042-96de-5b92-a6c6-16aaf2aee156","relatedPosts":["/python-cryptgraphy1/"]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}