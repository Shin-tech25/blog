{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-enum2/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"e9d4280e-abbf-5594-99ac-dc7c35ffe247","excerpt":"概要 Python における Enum（列挙型）は複数の定数を体系的に管理するための機能です。本記事では、この Enum を利用して複数のステータスを効率的にビット演算で管理する方法について詳しく解説します。 Enum とビットフラグとは Python の標準モジュールであるには主に次の…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></p>\n</li>\n<li>\n<p><a href=\"#enum-%E3%81%A8%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%83%A9%E3%82%B0%E3%81%A8%E3%81%AF\">Enum とビットフラグとは</a></p>\n<ul>\n<li><a href=\"#enum\">Enum</a></li>\n<li><a href=\"#intenum\">IntEnum</a></li>\n<li><a href=\"#flag\">Flag</a></li>\n<li><a href=\"#intflag\">IntFlag</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%A4%87%E6%95%B0%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\">複数ステータスの設定方法</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%89%B9%E5%AE%9A%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95\">特定ステータスの確認方法</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96%E6%96%B9%E6%B3%95\">ステータスの無効化方法</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E6%96%B9%E6%B3%95\">ステータスの切り替え方法</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E4%BE%8B\">実践的な例</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%83%A9%E3%82%B0%E7%AE%A1%E7%90%86%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">ビットフラグ管理のメリット</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n</li>\n</ul>","html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<p>Python における Enum（列挙型）は複数の定数を体系的に管理するための機能です。本記事では、この Enum を利用して複数のステータスを効率的にビット演算で管理する方法について詳しく解説します。</p>\n<h2 id=\"enum-とビットフラグとは\" style=\"position:relative;\"><a href=\"#enum-%E3%81%A8%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%83%A9%E3%82%B0%E3%81%A8%E3%81%AF\" aria-label=\"enum とビットフラグとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum とビットフラグとは</h2>\n<p>Python の標準モジュールである<code class=\"language-text\">enum</code>には主に次の 4 つのクラスがあります。ここで、Enum や IntEnum は基本的な定数管理に用いられ、IntEnum は整数との比較が可能なため、排他的な状態管理（状態は基本的に一つ）に適しています。一方、Flag や IntFlag はビット演算により複数のステータス（フラグ）を同時に管理するために設計され、IntFlag は整数との互換性を持ちながら、複数のフラグを組み合わせる用途に向いています。</p>\n<table>\n<thead>\n<tr>\n<th>クラス名</th>\n<th>説明</th>\n<th>メンバ間の演算</th>\n<th>整数との互換性</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enum</td>\n<td>通常の列挙型。単一の状態管理に利用</td>\n<td>不可</td>\n<td>無し</td>\n<td>定数管理（状態は一つ）</td>\n</tr>\n<tr>\n<td>IntEnum</td>\n<td>Enum の整数型バージョン。整数値との比較が可能</td>\n<td>不可</td>\n<td>有り</td>\n<td>状態管理（排他的な状態）</td>\n</tr>\n<tr>\n<td>Flag</td>\n<td>ビット演算を利用したフラグ型。複数フラグを組み合わせ可能</td>\n<td>可</td>\n<td>無し</td>\n<td>複数のフラグ管理</td>\n</tr>\n<tr>\n<td>IntFlag</td>\n<td>Flag の整数型バージョン。整数値としての演算・比較が可能</td>\n<td>可</td>\n<td>有り</td>\n<td>複数のフラグ管理</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum</h3>\n<p>通常の Enum は定数値を列挙します。演算は行えません。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    RED <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    GREEN <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    BLUE <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Color.RED</span></code></pre></div>\n<h3 id=\"intenum\" style=\"position:relative;\"><a href=\"#intenum\" aria-label=\"intenum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntEnum</h3>\n<p>IntEnum は整数としても扱える Enum です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> IntEnum\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">(</span>IntEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    SUCCESS <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    FAILURE <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">.</span>SUCCESS <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<h3 id=\"flag\" style=\"position:relative;\"><a href=\"#flag\" aria-label=\"flag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flag</h3>\n<p>ビット単位の演算を行えますが、整数値との直接的な比較はできません。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Flag<span class=\"token punctuation\">,</span> auto\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Permission</span><span class=\"token punctuation\">(</span>Flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    READ <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    WRITE <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nperm <span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>READ <span class=\"token operator\">|</span> Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Permission.READ|WRITE</span></code></pre></div>\n<h3 id=\"intflag\" style=\"position:relative;\"><a href=\"#intflag\" aria-label=\"intflag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntFlag</h3>\n<p>Flag の整数互換バージョンで、整数値としての演算や比較が可能です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> IntFlag<span class=\"token punctuation\">,</span> auto\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Permission</span><span class=\"token punctuation\">(</span>IntFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    READ <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    WRITE <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nperm <span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>READ <span class=\"token operator\">|</span> Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<p>本記事では主に<code class=\"language-text\">IntFlag</code>を利用したビットフラグの管理方法を解説します。</p>\n<h2 id=\"複数ステータスの設定方法\" style=\"position:relative;\"><a href=\"#%E8%A4%87%E6%95%B0%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\" aria-label=\"複数ステータスの設定方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>複数ステータスの設定方法</h2>\n<p>複数のステータスを設定するにはビット単位の論理和（OR）演算子<code class=\"language-text\">|</code>を用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">status <span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>READ <span class=\"token operator\">|</span> Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Permission.READ|WRITE</span></code></pre></div>\n<h2 id=\"特定ステータスの確認方法\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%AE%9A%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95\" aria-label=\"特定ステータスの確認方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特定ステータスの確認方法</h2>\n<p>設定されたステータスを確認するには、論理積（AND）演算子<code class=\"language-text\">&amp;</code>を用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> status <span class=\"token operator\">&amp;</span> Permission<span class=\"token punctuation\">.</span>READ<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"READ可能\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"ステータスの無効化方法\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96%E6%96%B9%E6%B3%95\" aria-label=\"ステータスの無効化方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ステータスの無効化方法</h2>\n<p>特定のステータスを無効化するには、論理否定（NOT）演算子<code class=\"language-text\">~</code>と論理積（AND）演算子<code class=\"language-text\">&amp;</code>を組み合わせて使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">status <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Permission.READ</span></code></pre></div>\n<h2 id=\"ステータスの切り替え方法\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E6%96%B9%E6%B3%95\" aria-label=\"ステータスの切り替え方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ステータスの切り替え方法</h2>\n<p>フラグの状態を切り替えるには排他的論理和（XOR）演算子<code class=\"language-text\">^</code>を用います。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">status <span class=\"token operator\">^</span><span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Permission.READ|WRITE</span></code></pre></div>\n<h2 id=\"実践的な例\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E4%BE%8B\" aria-label=\"実践的な例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実践的な例</h2>\n<p>以下に実践的な使用例を示します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> IntFlag<span class=\"token punctuation\">,</span> auto\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Permission</span><span class=\"token punctuation\">(</span>IntFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    READ <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    WRITE <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    EXECUTE <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    DELETE <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nuser_permission <span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>READ <span class=\"token operator\">|</span> Permission<span class=\"token punctuation\">.</span>WRITE\n\n<span class=\"token keyword\">if</span> user_permission <span class=\"token operator\">&amp;</span> Permission<span class=\"token punctuation\">.</span>WRITE<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"書き込み権限あり\"</span><span class=\"token punctuation\">)</span>\n\nuser_permission <span class=\"token operator\">|</span><span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>EXECUTE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_permission<span class=\"token punctuation\">)</span>\n\nuser_permission <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>Permission<span class=\"token punctuation\">.</span>WRITE\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_permission<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"ビットフラグ管理のメリット\" style=\"position:relative;\"><a href=\"#%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%83%A9%E3%82%B0%E7%AE%A1%E7%90%86%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\" aria-label=\"ビットフラグ管理のメリット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ビットフラグ管理のメリット</h2>\n<ul>\n<li>メモリ効率が良い（複数の状態を 1 つの整数で管理可能）</li>\n<li>状態チェックや変更が高速かつ簡単</li>\n<li>拡張が容易</li>\n</ul>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>Python の<code class=\"language-text\">IntFlag</code>を用いたビットフラグ管理は、多数のステータスをシンプルかつ効率的に扱うための強力な手法です。ビット演算を用いることで、状態の設定、確認、切り替え、削除が非常に簡潔に表現できます。実務で広く利用されるテクニックであり、覚えておくと役立つでしょう。</p>","frontmatter":{"title":"PythonのEnumを用いて複数ステータスをビット演算で管理する","date":"2025-02-25","description":"PythonのenumモジュールのIntFlagを中心に、ビット演算を活用して複数のステータスを効率的に管理する方法とそのメリットを解説します。","tags":["Python","enum","ビット演算子"],"featuredImage":{"publicURL":"/static/58806ff8f67ddf870a8d9902f47dcd61/python2.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg","srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/19e71/python2.jpg 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/68974/python2.jpg 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/6766a/python2.webp 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/22bfc/python2.webp 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/d689f/python2.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[{"fields":{"slug":"/python-enum1/"},"frontmatter":{"title":"Pythonのenumモジュールの使い方と実践例","date":"2025-02-02","tags":["Python","enum"],"description":"Pythonのenumモジュールの基本構文から、状態管理、フラグ操作、APIステータス管理といった実践的な用途までを体系的に解説します。定数管理を効率化し、状態遷移やデータ整合性を強化するためのベストプラクティスを紹介します。","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg","srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/19e71/python2.jpg 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/68974/python2.jpg 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/6766a/python2.webp 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/22bfc/python2.webp 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/d689f/python2.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}}]},"previous":{"fields":{"slug":"/vscode-extensions-ruff/"},"frontmatter":{"title":"VSCodeでRuffを用いて静的解析、コードフォーマットを自動化する"}},"next":{"fields":{"slug":"/python-json1/"},"frontmatter":{"title":"Pythonで始めるJSON入門：基本からファイル操作、Web API活用まで"}}},"pageContext":{"id":"e9d4280e-abbf-5594-99ac-dc7c35ffe247","previousPostId":"1ab529d1-e9dd-553a-af6d-2d113b088c21","nextPostId":"8aa80dd6-8386-5f3c-a56b-f695f3a3b259","relatedPosts":["/python-enum1/"]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}