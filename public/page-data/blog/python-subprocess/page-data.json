{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-subprocess/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"0841c643-62a6-58bf-a69d-4b09100197ae","excerpt":"概要  モジュールは、Python スクリプトの中からシステムコマンドを実行したり、その実行に関連する出力や結果を取得するための機能を提供します。このガイドでは、 モジュールの使い方や具体的な例を紹介します。 サブプロセスの実行 Python…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A1%8C\">サブプロセスの実行</a></p>\n<ul>\n<li><a href=\"#%E4%BE%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C\">例:コマンドの実行</a></li>\n<li><a href=\"#%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">戻り値について</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-textruncode-%E9%96%A2%E6%95%B0%E3%81%AE%E8%A9%B3%E7%B4%B0\"><code class=\"language-text\">run()</code> 関数の詳細</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%B8%BB%E3%81%AA%E5%BC%95%E6%95%B0\">主な引数</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E8%B7%B5%E4%BE%8B\">実践例</a></p>\n<ul>\n<li><a href=\"#capture_output\">capture_output</a></li>\n<li><a href=\"#check\">check</a></li>\n<li><a href=\"#timeout\">timeout</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#popen-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%88%A9%E7%94%A8\">Popen クラスの利用</a></p>\n<ul>\n<li><a href=\"#%E4%BE%8B%E3%83%91%E3%82%A4%E3%83%97%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%87%BA%E5%8A%9B%E3%81%AE%E5%AE%9F%E8%A1%8C\">例:パイプを使用した出力の実行</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95\">よくあるエラーと対処法</a></p>\n<ul>\n<li><a href=\"#1-timeoutexpired\">1. TimeoutExpired</a></li>\n<li><a href=\"#2-calledprocesserror\">2. CalledProcessError</a></li>\n</ul>\n</li>\n</ul>","html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<p><code class=\"language-text\">subprocess</code> モジュールは、Python スクリプトの中からシステムコマンドを実行したり、その実行に関連する出力や結果を取得するための機能を提供します。このガイドでは、<code class=\"language-text\">subprocess</code> モジュールの使い方や具体的な例を紹介します。</p>\n<h2 id=\"サブプロセスの実行\" style=\"position:relative;\"><a href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A1%8C\" aria-label=\"サブプロセスの実行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>サブプロセスの実行</h2>\n<p>Python でサブプロセスを実行するには、<code class=\"language-text\">subprocess.run(args, *, **kwargs)</code> 関数を使用します。この関数は、指定されたコマンドを実行し、その結果を取得します。</p>\n<h3 id=\"例コマンドの実行\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C\" aria-label=\"例コマンドの実行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例:コマンドの実行</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> subprocess\n\nresult <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> capture_output<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上記のコードは、システムコマンドとして <code class=\"language-text\">echo</code> を実行し、その出力を取得します。</p>\n<h3 id=\"戻り値について\" style=\"position:relative;\"><a href=\"#%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"戻り値について permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>戻り値について</h3>\n<p><code class=\"language-text\">subprocess.run()</code> の戻り値は <code class=\"language-text\">subprocess.CompletedProcess</code> クラスのインスタンスです。このクラスは以下の属性を持っています。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>args</td>\n<td>実行したコマンドの引数のリスト</td>\n</tr>\n<tr>\n<td>returncode</td>\n<td>コマンドの終了ステータスコード（0 は成功、0 以外はエラー）</td>\n</tr>\n<tr>\n<td>stdout</td>\n<td>標準出力の内容（<code class=\"language-text\">capture_output=True</code> または <code class=\"language-text\">stdout=subprocess.PIPE</code> の場合に利用可能）</td>\n</tr>\n<tr>\n<td>stderr</td>\n<td>標準エラー出力の内容（<code class=\"language-text\">capture_output=True</code> または <code class=\"language-text\">stderr=subprocess.PIPE</code> の場合に利用可能）</td>\n</tr>\n</tbody>\n</table>\n<p>例えば、以下のコードで戻り値を確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> capture_output<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Command: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Return code: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>returncode<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Output: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"code-classlanguage-textruncode-関数の詳細\" style=\"position:relative;\"><a href=\"#code-classlanguage-textruncode-%E9%96%A2%E6%95%B0%E3%81%AE%E8%A9%B3%E7%B4%B0\" aria-label=\"code classlanguage textruncode 関数の詳細 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">run()</code> 関数の詳細</h2>\n<p><code class=\"language-text\">subprocess.run(args, *, **kwargs)</code> は、多様な引数を指定できます。下記に主な引数を説明します。</p>\n<h3 id=\"主な引数\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E3%81%AA%E5%BC%95%E6%95%B0\" aria-label=\"主な引数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主な引数</h3>\n<table>\n<thead>\n<tr>\n<th>引数</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>args</td>\n<td>実行するコマンドと引数のリスト</td>\n</tr>\n<tr>\n<td>stdin</td>\n<td>標準入力を指定する</td>\n</tr>\n<tr>\n<td>stdout</td>\n<td>標準出力を指定する</td>\n</tr>\n<tr>\n<td>stderr</td>\n<td>標準エラー出力を指定する</td>\n</tr>\n<tr>\n<td>capture_output</td>\n<td>True の場合、標準出力・標準エラー出力をキャプチャする</td>\n</tr>\n<tr>\n<td>shell</td>\n<td>True の場合、シェルを経由してコマンドを実行する</td>\n</tr>\n<tr>\n<td>cwd</td>\n<td>作業ディレクトリを指定する</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>実行タイムアウトの秒数を指定する</td>\n</tr>\n<tr>\n<td>check</td>\n<td>True の場合、終了ステータスが 0 以外の時に例外を発生させる</td>\n</tr>\n<tr>\n<td>text</td>\n<td>True の場合、入出力を文字列として処理する</td>\n</tr>\n<tr>\n<td>env</td>\n<td>環境変数を指定する</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"実践例\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%B7%B5%E4%BE%8B\" aria-label=\"実践例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実践例</h3>\n<h4 id=\"capture_output\" style=\"position:relative;\"><a href=\"#capture_output\" aria-label=\"capture_output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>capture_output</h4>\n<p><code class=\"language-text\">capture_output=True</code> を指定することで、標準出力や標準エラー出力を簡単に取得できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> capture_output<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"check\" style=\"position:relative;\"><a href=\"#check\" aria-label=\"check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>check</h4>\n<p><code class=\"language-text\">check=True</code> を指定すると、コマンドがエラー終了した場合に <code class=\"language-text\">subprocess.CalledProcessError</code> が発生します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nonexistent_file.txt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> check<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>CalledProcessError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"timeout\" style=\"position:relative;\"><a href=\"#timeout\" aria-label=\"timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>timeout</h4>\n<p><code class=\"language-text\">timeout</code> を設定することで、指定秒数以内に終了しないプロセスを停止できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>TimeoutExpired<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The process timed out!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"popen-クラスの利用\" style=\"position:relative;\"><a href=\"#popen-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%88%A9%E7%94%A8\" aria-label=\"popen クラスの利用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Popen クラスの利用</h2>\n<p>より高度な管理を行いたい場合、<code class=\"language-text\">Popen</code> クラスを使用します。<code class=\"language-text\">Popen</code> はサブプロセスを開始し、出力を利用して別のプロセスへ入力することも可能です。</p>\n<h3 id=\"例パイプを使用した出力の実行\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%E3%83%91%E3%82%A4%E3%83%97%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%87%BA%E5%8A%9B%E3%81%AE%E5%AE%9F%E8%A1%8C\" aria-label=\"例パイプを使用した出力の実行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例:パイプを使用した出力の実行</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> subprocess <span class=\"token keyword\">import</span> Popen<span class=\"token punctuation\">,</span> PIPE\n\ncmd1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">]</span>\ncmd2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[a-z]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[A-Z]'</span><span class=\"token punctuation\">]</span>\n\np1 <span class=\"token operator\">=</span> Popen<span class=\"token punctuation\">(</span>cmd1<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">)</span>\np2 <span class=\"token operator\">=</span> Popen<span class=\"token punctuation\">(</span>cmd2<span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">)</span>\n\nstdout_data<span class=\"token punctuation\">,</span> stderr_data <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stdout_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上記の例は、<code class=\"language-text\">echo</code> の出力を大文字変換するプロセスの入力として使用しています。</p>\n<h2 id=\"よくあるエラーと対処法\" style=\"position:relative;\"><a href=\"#%E3%82%88%E3%81%8F%E3%81%82%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A8%E5%AF%BE%E5%87%A6%E6%B3%95\" aria-label=\"よくあるエラーと対処法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>よくあるエラーと対処法</h2>\n<h3 id=\"1-timeoutexpired\" style=\"position:relative;\"><a href=\"#1-timeoutexpired\" aria-label=\"1 timeoutexpired permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. TimeoutExpired</h3>\n<p>タイムアウト例外が発生した場合、<code class=\"language-text\">timeout</code> を設定していることを確認してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sleep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>TimeoutExpired <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-calledprocesserror\" style=\"position:relative;\"><a href=\"#2-calledprocesserror\" aria-label=\"2 calledprocesserror permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. CalledProcessError</h3>\n<p><code class=\"language-text\">check=True</code> を設定した場合、コマンドが失敗するとこの例外が発生します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'non_existent_command'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> check<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> subprocess<span class=\"token punctuation\">.</span>CalledProcessError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Pythonでサブプロセスを管理する方法 - subprocess","date":"2025-02-11","description":"Pythonの標準ライブラリsubprocessモジュールを使用して、システムコマンドの実行、プロセス管理、入出力のキャプチャ方法について詳しく解説します。初心者から上級者まで役立つ実践例を紹介。","tags":["Python","subprocess"],"featuredImage":{"publicURL":"/static/58806ff8f67ddf870a8d9902f47dcd61/python2.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg","srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/19e71/python2.jpg 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/68974/python2.jpg 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/6766a/python2.webp 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/22bfc/python2.webp 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/d689f/python2.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[]},"previous":{"fields":{"slug":"/python-pydoc/"},"frontmatter":{"title":"Pythonでドキュメントを自動生成するモジュール - pydoc"}},"next":{"fields":{"slug":"/python-cryptgraphy1/"},"frontmatter":{"title":"Pythonによる共通鍵暗号化方式 - cryptography"}}},"pageContext":{"id":"0841c643-62a6-58bf-a69d-4b09100197ae","previousPostId":"e513f506-93fe-5d8a-8b3b-9bc5efa8f5fb","nextPostId":"cffe2b08-0dcb-5678-90ff-8a30b0aff337","relatedPosts":[]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}