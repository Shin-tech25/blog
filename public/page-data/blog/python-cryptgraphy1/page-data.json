{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-cryptgraphy1/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"cffe2b08-0dcb-5678-90ff-8a30b0aff337","excerpt":"…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E5%AE%9F%E8%B7%B5\">共通鍵暗号化の実践</a></p>\n<ul>\n<li><a href=\"#1-code-classlanguage-textcryptographycode-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">1. <code class=\"language-text\">cryptography</code> ライブラリのインストール</a></li>\n<li><a href=\"#2-%E9%8D%B5%E3%81%AE%E7%94%9F%E6%88%90\">2. 鍵の生成</a></li>\n<li><a href=\"#3-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96\">3. データの暗号化</a></li>\n<li><a href=\"#4-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BE%A9%E5%8F%B7\">4. データの復号</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9\">共通鍵暗号化のメリットと注意点</a></p>\n<ul>\n<li><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">メリット</a></li>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\">注意点</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E4%BE%8B%E3%81%BE%E3%81%A8%E3%82%81\">コード例まとめ</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n</li>\n</ul>","html":"<h2 id=\"概要\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81\" aria-label=\"概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要</h2>\n<p>共通鍵暗号化方式（対称鍵暗号）では、暗号化と復号に同じ鍵（共通鍵）を使用します。この方法は、公開鍵暗号方式に比べて処理速度が速いため、大量のデータを暗号化する場合に適しています。しかし、鍵の配布や管理に関する問題が発生するため、鍵の安全な取り扱いが重要です。</p>\n<p><code class=\"language-text\">cryptography</code> ライブラリを使用することで、共通鍵暗号化方式を簡単に実装することができます。このライブラリは、高レベルのインターフェースで暗号化操作を提供し、セキュリティの高い方法を利用することができます。</p>\n<p>本記事では、<code class=\"language-text\">cryptography</code> ライブラリを使用して共通鍵暗号化を行う方法を、実践的なコード例を交えて解説します。</p>\n<h2 id=\"共通鍵暗号化の実践\" style=\"position:relative;\"><a href=\"#%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E5%AE%9F%E8%B7%B5\" aria-label=\"共通鍵暗号化の実践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共通鍵暗号化の実践</h2>\n<p>共通鍵暗号化を行うためには、まず暗号化に使用する鍵を生成する必要があります。<code class=\"language-text\">cryptography</code> ライブラリでは、<code class=\"language-text\">Fernet</code> クラスを使って暗号化と復号を行うことができます。<code class=\"language-text\">Fernet</code> は、対称鍵暗号を使用してデータを暗号化し、復号するためのクラスです。</p>\n<p>以下の例では、共通鍵暗号化を実際に行う方法を示します。</p>\n<h3 id=\"1-code-classlanguage-textcryptographycode-ライブラリのインストール\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textcryptographycode-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"1 code classlanguage textcryptographycode ライブラリのインストール permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">cryptography</code> ライブラリのインストール</h3>\n<p>まずは、<code class=\"language-text\">cryptography</code> ライブラリをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> cryptography</code></pre></div>\n<h3 id=\"2-鍵の生成\" style=\"position:relative;\"><a href=\"#2-%E9%8D%B5%E3%81%AE%E7%94%9F%E6%88%90\" aria-label=\"2 鍵の生成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 鍵の生成</h3>\n<p>共通鍵暗号化方式では、暗号化と復号に同じ鍵を使用します。この鍵を生成するために、<code class=\"language-text\">Fernet</code> クラスの <code class=\"language-text\">generate_key()</code> メソッドを使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>fernet <span class=\"token keyword\">import</span> Fernet\n\n<span class=\"token comment\"># 鍵の生成</span>\nkey <span class=\"token operator\">=</span> Fernet<span class=\"token punctuation\">.</span>generate_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncipher_suite <span class=\"token operator\">=</span> Fernet<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Generated Key: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このコードで生成された鍵は、暗号化と復号に使用されます。鍵は安全に保管し、必要なときに使用します。</p>\n<h3 id=\"3-データの暗号化\" style=\"position:relative;\"><a href=\"#3-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96\" aria-label=\"3 データの暗号化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. データの暗号化</h3>\n<p><code class=\"language-text\">Fernet</code> クラスを使用して、生成した鍵でデータを暗号化することができます。以下の例では、テキストデータを暗号化しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 暗号化するデータ</span>\ndata <span class=\"token operator\">=</span> <span class=\"token string\">b\"this is a secret message\"</span>\n\n<span class=\"token comment\"># データを暗号化</span>\nencrypted_data <span class=\"token operator\">=</span> cipher_suite<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Encrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encrypted_data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このコードでは、<code class=\"language-text\">data</code> というバイト列を暗号化しています。<code class=\"language-text\">encrypt()</code> メソッドを使うことで、指定したデータが暗号化されます。</p>\n<h3 id=\"4-データの復号\" style=\"position:relative;\"><a href=\"#4-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%BE%A9%E5%8F%B7\" aria-label=\"4 データの復号 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. データの復号</h3>\n<p>暗号化されたデータは、<code class=\"language-text\">decrypt()</code> メソッドを使用して元のデータに復号することができます。復号には、暗号化時と同じ鍵を使用する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># データの復号</span>\ndecrypted_data <span class=\"token operator\">=</span> cipher_suite<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>encrypted_data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Decrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>decrypted_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ここでは、暗号化されたデータを復号し、元のメッセージを取り戻しています。</p>\n<h2 id=\"共通鍵暗号化のメリットと注意点\" style=\"position:relative;\"><a href=\"#%E5%85%B1%E9%80%9A%E9%8D%B5%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%81%A8%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"共通鍵暗号化のメリットと注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>共通鍵暗号化のメリットと注意点</h2>\n<h3 id=\"メリット\" style=\"position:relative;\"><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\" aria-label=\"メリット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>メリット</h3>\n<ul>\n<li><strong>高速な処理速度</strong>：公開鍵暗号方式に比べて、共通鍵暗号は暗号化および復号の速度が速いです。大量のデータを扱う際に非常に有用です。</li>\n<li><strong>簡易な実装</strong>：<code class=\"language-text\">cryptography</code> ライブラリを使用すれば、共通鍵暗号化を簡単に実装することができます。</li>\n</ul>\n<h3 id=\"注意点\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意点</h3>\n<ul>\n<li><strong>鍵の管理が重要</strong>：共通鍵暗号方式では、同じ鍵で暗号化と復号を行うため、鍵の安全な管理が不可欠です。鍵が漏洩すると、暗号化されたデータのセキュリティが破られることになります。</li>\n<li><strong>鍵の配布問題</strong>：複数のユーザーが共通鍵を使用する場合、その鍵を安全に配布する方法を確保する必要があります。</li>\n</ul>\n<h2 id=\"コード例まとめ\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E4%BE%8B%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"コード例まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コード例まとめ</h2>\n<p>ここまでの内容をまとめると、以下のようなコードになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>fernet <span class=\"token keyword\">import</span> Fernet\n\n<span class=\"token comment\"># 鍵の生成</span>\nkey <span class=\"token operator\">=</span> Fernet<span class=\"token punctuation\">.</span>generate_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncipher_suite <span class=\"token operator\">=</span> Fernet<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 暗号化するデータ</span>\ndata <span class=\"token operator\">=</span> <span class=\"token string\">b\"this is a secret message\"</span>\nencrypted_data <span class=\"token operator\">=</span> cipher_suite<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Encrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encrypted_data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 復号する</span>\ndecrypted_data <span class=\"token operator\">=</span> cipher_suite<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>encrypted_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Decrypted Data: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>decrypted_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このコードを実行することで、共通鍵暗号化を使用したデータの暗号化と復号化が行えます。鍵の生成、データの暗号化、復号化の流れを順に確認できます。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p><code class=\"language-text\">cryptography</code> ライブラリを使用して共通鍵暗号化を行う方法について解説しました。共通鍵暗号方式は、高速でありながらセキュリティが高い方法です。しかし、鍵の管理や配布に関しては十分に注意が必要です。実践的なコード例を参考にして、安全で効率的な暗号化操作を実装してください。</p>","frontmatter":{"title":"Pythonによる共通鍵暗号化方式 - cryptography","date":"2025-02-14","description":"Pythonで共通鍵暗号化方式を実装するためにcryptographyライブラリを使用した方法を解説します。実際のコード例を通して、暗号化、復号化を学びます。","tags":["Python","暗号化","cryptography","セキュリティ"],"featuredImage":{"publicURL":"/static/becfdfbe97644644be53ae4b70532f68/security.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg","srcSet":"/static/becfdfbe97644644be53ae4b70532f68/19e71/security.jpg 128w,\n/static/becfdfbe97644644be53ae4b70532f68/68974/security.jpg 256w,\n/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/becfdfbe97644644be53ae4b70532f68/6766a/security.webp 128w,\n/static/becfdfbe97644644be53ae4b70532f68/22bfc/security.webp 256w,\n/static/becfdfbe97644644be53ae4b70532f68/d689f/security.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[{"fields":{"slug":"/python-cryptgraphy2/"},"frontmatter":{"title":"Pythonによる公開鍵暗号化方式 - cryptography","date":"2025-02-15","tags":["Python","暗号化","cryptography","セキュリティ"],"description":"Pythonで公開鍵暗号化方式を実装するためにcryptographyライブラリを使用した方法を解説します。実際のコード例を通して、公開鍵と秘密鍵を利用した暗号化、復号化を学びます。","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg","srcSet":"/static/becfdfbe97644644be53ae4b70532f68/19e71/security.jpg 128w,\n/static/becfdfbe97644644be53ae4b70532f68/68974/security.jpg 256w,\n/static/becfdfbe97644644be53ae4b70532f68/3c367/security.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/becfdfbe97644644be53ae4b70532f68/6766a/security.webp 128w,\n/static/becfdfbe97644644be53ae4b70532f68/22bfc/security.webp 256w,\n/static/becfdfbe97644644be53ae4b70532f68/d689f/security.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}}]},"previous":{"fields":{"slug":"/python-subprocess/"},"frontmatter":{"title":"Pythonでサブプロセスを管理する方法 - subprocess"}},"next":{"fields":{"slug":"/python-cryptgraphy2/"},"frontmatter":{"title":"Pythonによる公開鍵暗号化方式 - cryptography"}}},"pageContext":{"id":"cffe2b08-0dcb-5678-90ff-8a30b0aff337","previousPostId":"0841c643-62a6-58bf-a69d-4b09100197ae","nextPostId":"34c7cf0d-03af-5a30-bfc8-ce4632a8ca17","relatedPosts":["/python-cryptgraphy2/"]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}