{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-pyyaml/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"471ab2c2-01cb-5cb3-ac1c-8b5b76b0d416","excerpt":"以下では、YAML (YAML Ain’t Markup Language) と Python の PyYAML を使った設定ファイルの扱い方をまとめて解説します。JSON や INI と同様に、YAML はテキストベースのデータ形式であり、可読性が高く、Ansible…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-yaml-%E3%81%A8%E3%81%AF\">1. YAML とは</a></p>\n</li>\n<li>\n<p><a href=\"#2-pyyaml-%E3%81%A8%E3%81%AF\">2. PyYAML とは</a></p>\n<ul>\n<li><a href=\"#21-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">2.1 インストール</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-yaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">3. YAML ファイルの読み込み</a></p>\n<ul>\n<li><a href=\"#31-code-classlanguage-textsafe_loadcode\">3.1 <code class=\"language-text\">safe_load()</code></a></li>\n<li><a href=\"#32-code-classlanguage-textloadcode\">3.2 <code class=\"language-text\">load()</code></a></li>\n<li><a href=\"#33-code-classlanguage-textload_allcode\">3.3 <code class=\"language-text\">load_all()</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-yaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\">4. YAML ファイルの書き込み</a></p>\n<ul>\n<li><a href=\"#41-code-classlanguage-textdefault_flow_stylefalsecode\">4.1 <code class=\"language-text\">default_flow_style=False</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#5-pyyaml-%E3%81%A7%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E7%82%B9\">5. PyYAML で気をつけるべき点</a></p>\n<ul>\n<li><a href=\"#51-%E3%83%AD%E3%83%BC%E3%83%80%E3%83%BC%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91\">5.1 ローダーの使い分け</a></li>\n<li><a href=\"#52-%E4%BB%BB%E6%84%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%AE%E3%83%AA%E3%82%B9%E3%82%AF\">5.2 任意コード実行のリスク</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#6-%E3%81%BE%E3%81%A8%E3%82%81\">6. まとめ</a></p>\n<ul>\n<li><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\">参考リンク</a></li>\n</ul>\n</li>\n</ul>","html":"<p>以下では、<strong>YAML (YAML Ain’t Markup Language)</strong> と Python の <strong>PyYAML</strong> を使った設定ファイルの扱い方をまとめて解説します。JSON や INI と同様に、YAML はテキストベースのデータ形式であり、可読性が高く、Ansible などの構成管理ツールでも広く利用されています。Python で YAML を読み書きする場合には、主に <strong>PyYAML</strong> ライブラリを使います。この記事では、PyYAML のインストール方法から基本的な使い方、注意点を紹介します。</p>\n<h2 id=\"1-yaml-とは\" style=\"position:relative;\"><a href=\"#1-yaml-%E3%81%A8%E3%81%AF\" aria-label=\"1 yaml とは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. YAML とは</h2>\n<p><strong>YAML</strong> は、JSON に似た構造を持つマークアップ言語の一種で、<strong>人間にとって可読性が高い</strong> という点が大きな特徴です。階層構造をインデントで表現し、オブジェクトやリストなどのデータ構造をシンプルに記述できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> localhost\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n<span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Alice\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Bob</code></pre></div>\n<p>上記の例のように、キーと値の組み合わせをインデントでネストさせることで、複雑なデータを見やすく整理できます。YAML は Ansible などのツールをはじめ、設定ファイルやデータ交換フォーマットとして広く利用されています。</p>\n<h2 id=\"2-pyyaml-とは\" style=\"position:relative;\"><a href=\"#2-pyyaml-%E3%81%A8%E3%81%AF\" aria-label=\"2 pyyaml とは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. PyYAML とは</h2>\n<p>Python で YAML を扱う際には、<strong>PyYAML</strong> というライブラリがよく利用されます。PyYAML は YAML の読み書き機能を提供し、<strong>safe_load</strong> や <strong>load_all</strong> といった関数を使って YAML データを Python のオブジェクトに変換することが可能です。</p>\n<h3 id=\"21-インストール\" style=\"position:relative;\"><a href=\"#21-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"21 インストール permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 インストール</h3>\n<p>PyYAML は PyPI 上に公開されているため、<code class=\"language-text\">pip</code> で簡単にインストールできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pyyaml</code></pre></div>\n<p>インストール後、Python スクリプト内で <code class=\"language-text\">import yaml</code> と記述して使用します。</p>\n<h2 id=\"3-yaml-ファイルの読み込み\" style=\"position:relative;\"><a href=\"#3-yaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\" aria-label=\"3 yaml ファイルの読み込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. YAML ファイルの読み込み</h2>\n<p>PyYAML では、<strong>load()</strong> や <strong>safe_load()</strong>、<strong>load_all()</strong> などの関数を使って、YAML データを Python の辞書やリストに変換できます。</p>\n<h3 id=\"31-code-classlanguage-textsafe_loadcode\" style=\"position:relative;\"><a href=\"#31-code-classlanguage-textsafe_loadcode\" aria-label=\"31 code classlanguage textsafe_loadcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 <code class=\"language-text\">safe_load()</code></h3>\n<p>最も推奨される読み込み方法は <strong><code class=\"language-text\">safe_load()</code></strong> です。安全に YAML を読み込み、信頼できないデータを扱う際にも比較的安全に利用できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># sample.yml</span>\n<span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n<span class=\"token key atrule\">smtp</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost\n  <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> test\n  <span class=\"token key atrule\">pass</span><span class=\"token punctuation\">:</span> secret</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> yaml\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>safe_load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 出力例: {'db': {'host': 'localhost', 'port': 3306}, 'smtp': {'host': 'localhost', 'user': 'test', 'pass': 'secret'}}</span></code></pre></div>\n<p><code class=\"language-text\">safe_load()</code> は内部で <code class=\"language-text\">SafeLoader</code> を使用しており、特定の Python オブジェクト（例: <code class=\"language-text\">!!python/object</code>) をデシリアライズしないため、セキュリティリスクが低減されます。</p>\n<h3 id=\"32-code-classlanguage-textloadcode\" style=\"position:relative;\"><a href=\"#32-code-classlanguage-textloadcode\" aria-label=\"32 code classlanguage textloadcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 <code class=\"language-text\">load()</code></h3>\n<p><strong><code class=\"language-text\">load()</code></strong> はより汎用的な読み込み関数で、指定しない限りデフォルトで <code class=\"language-text\">FullLoader</code> が使われます。<code class=\"language-text\">safe_load()</code> よりも柔軟ですが、信頼できないデータに対しては注意が必要です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> yaml\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>yaml<span class=\"token punctuation\">.</span>FullLoader<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Loader=yaml.FullLoader</code> と指定しない場合、PyYAML のバージョンによってはデフォルトのローダーが異なる可能性があるため注意が必要です。</li>\n</ul>\n<h3 id=\"33-code-classlanguage-textload_allcode\" style=\"position:relative;\"><a href=\"#33-code-classlanguage-textload_allcode\" aria-label=\"33 code classlanguage textload_allcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 <code class=\"language-text\">load_all()</code></h3>\n<p>YAML ファイル内に複数のドキュメントが連続して記述されている場合には、<strong><code class=\"language-text\">load_all()</code></strong> あるいは <strong><code class=\"language-text\">safe_load_all()</code></strong> を使うことで、各ドキュメントを順番に読み込むことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># multi_docs.yml</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"spam\"</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"egg\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> yaml\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multi_docs.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> doc <span class=\"token keyword\">in</span> yaml<span class=\"token punctuation\">.</span>safe_load_all<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1つ目: {'order': 1, 'menu': 'spam'}</span>\n<span class=\"token comment\"># 2つ目: {'order': 2, 'menu': 'egg'}</span></code></pre></div>\n<h2 id=\"4-yaml-ファイルの書き込み\" style=\"position:relative;\"><a href=\"#4-yaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\" aria-label=\"4 yaml ファイルの書き込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. YAML ファイルの書き込み</h2>\n<p>YAML ファイルへデータを出力する際は、<strong><code class=\"language-text\">yaml.dump()</code></strong> 関数を使います。以下の例では、Python の辞書を YAML 形式でファイルに保存しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> yaml\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"db_server\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"web_server\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.10.7\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"is_active\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dump.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    yaml<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> default_flow_style<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"41-code-classlanguage-textdefault_flow_stylefalsecode\" style=\"position:relative;\"><a href=\"#41-code-classlanguage-textdefault_flow_stylefalsecode\" aria-label=\"41 code classlanguage textdefault_flow_stylefalsecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 <code class=\"language-text\">default_flow_style=False</code></h3>\n<p><code class=\"language-text\">default_flow_style=False</code> を指定すると、ブロックスタイル（改行やインデントを使った形式）で出力されます。これにより可読性の高い YAML ファイルを生成できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">db_server</span><span class=\"token punctuation\">:</span> localhost\n<span class=\"token key atrule\">web_server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> 192.168.10.7\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n<span class=\"token key atrule\">is_active</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">True</code> / <code class=\"language-text\">False</code> は YAML 形式では <code class=\"language-text\">true</code> / <code class=\"language-text\">false</code> と小文字で出力されます。</li>\n</ul>\n<h2 id=\"5-pyyaml-で気をつけるべき点\" style=\"position:relative;\"><a href=\"#5-pyyaml-%E3%81%A7%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E7%82%B9\" aria-label=\"5 pyyaml で気をつけるべき点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. PyYAML で気をつけるべき点</h2>\n<h3 id=\"51-ローダーの使い分け\" style=\"position:relative;\"><a href=\"#51-%E3%83%AD%E3%83%BC%E3%83%80%E3%83%BC%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91\" aria-label=\"51 ローダーの使い分け permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 ローダーの使い分け</h3>\n<p>PyYAML には複数のローダーが存在し、それぞれ読み込み時の挙動や安全性が異なります。</p>\n<ul>\n<li><strong>SafeLoader</strong>: <code class=\"language-text\">safe_load()</code> に対応。<code class=\"language-text\">!!python/object</code> タグなどをロードしないため、セキュリティリスクが低い。</li>\n<li><strong>FullLoader</strong>: Python オブジェクトを完全にロードする。外部からの信頼できないデータには推奨されない。</li>\n<li><strong>UnsafeLoader</strong>: さらに制限が緩いため、基本的には使用推奨されない。</li>\n</ul>\n<p>信頼できないデータを扱う場合は、原則として <strong><code class=\"language-text\">safe_load()</code></strong> を使うことが望ましいです。</p>\n<h3 id=\"52-任意コード実行のリスク\" style=\"position:relative;\"><a href=\"#52-%E4%BB%BB%E6%84%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%AE%E3%83%AA%E3%82%B9%E3%82%AF\" aria-label=\"52 任意コード実行のリスク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 任意コード実行のリスク</h3>\n<p>YAML のタグ機能を使って Python オブジェクトを表現できるため、悪意のある YAML データを <code class=\"language-text\">FullLoader</code> や <code class=\"language-text\">UnsafeLoader</code> でロードすると、任意のコードが実行される危険性があります。外部から渡される YAML データは、<strong>必ず</strong> <code class=\"language-text\">safe_load()</code> を使うなどの対策を行いましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 悪意のある例: !!python/object などで任意コード実行を狙う</span>\n<span class=\"token tag\">!!python/object/new:os.system</span>\n<span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"echo attack!\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> yaml\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"evil.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>yaml<span class=\"token punctuation\">.</span>UnsafeLoader<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 非推奨</span>\n<span class=\"token comment\"># 悪意あるコードが実行される可能性あり</span></code></pre></div>\n<h2 id=\"6-まとめ\" style=\"position:relative;\"><a href=\"#6-%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"6 まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. まとめ</h2>\n<ul>\n<li><strong>YAML</strong> はインデントベースで可読性の高いデータ形式であり、Ansible など多くのツールで採用されている。</li>\n<li>Python では <strong>PyYAML</strong> ライブラリを用いて、<code class=\"language-text\">safe_load()</code> や <code class=\"language-text\">load_all()</code>、<code class=\"language-text\">dump()</code> などの関数で簡単に読み書きができる。</li>\n<li>セキュリティ面では <strong>ローダー</strong> の使い分けが重要。信頼できないデータは <code class=\"language-text\">safe_load()</code> を使うことでリスクを低減できる。</li>\n<li>YAML ファイルを使うことで、アプリケーションや設定管理ツールの設定を人間にとって読みやすい形式で管理できる。</li>\n</ul>\n<p>JSON や INI ファイルと同様、YAML は設定ファイルやデータ交換の場面でよく利用されます。Python での開発・運用の際は、PyYAML の特性を理解して、安全かつ効率的に扱ってみてください。</p>\n<h3 id=\"参考リンク\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E3%83%AA%E3%83%B3%E3%82%AF\" aria-label=\"参考リンク permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考リンク</h3>\n<ul>\n<li><a href=\"https://pypi.org/project/PyYAML/\">公式ドキュメント: PyYAML Documentation</a></li>\n<li><a href=\"https://www.ansible.com/\">Ansible 公式サイト</a> (YAML の具体的な活用例として)</li>\n<li><a href=\"https://yaml.org/\">YAML の仕様 (yaml.org)</a></li>\n</ul>\n<p>以上が、YAML ファイルの基本と PyYAML を使った読み書きの概要です。アプリケーションの設定管理や構成管理ツールなどに活用する際に、ぜひ参考にしてみてください。</p>","frontmatter":{"title":"Pythonで始めるYAML入門：PyYAMLで読み書きする方法","date":"2025-03-02","description":"この記事では、YAMLの基本概念と、PyYAMLライブラリを使ったYAMLファイルの読み書き方法、さらにセキュリティ上の注意点について具体例を交えて分かりやすく解説します。","tags":["Python","YAML","PyYAML","設定管理"],"featuredImage":{"publicURL":"/static/07758e24f5d5bc9c6a17cc7722c80477/python3.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg","srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/19e71/python3.jpg 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/68974/python3.jpg 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/6766a/python3.webp 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/22bfc/python3.webp 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/d689f/python3.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[{"fields":{"slug":"/python-configparser/"},"frontmatter":{"title":"Pythonによる設定管理 - configparser","date":"2025-03-01","tags":["Python","INI","configparser","設定管理","技術記事"],"description":"INIファイルの基本構造や特徴、Pythonのconfigparserモジュールを使った設定管理の方法について、具体的なコード例と共に分かりやすく解説します。","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg","srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/19e71/python3.jpg 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/68974/python3.jpg 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/3c367/python3.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/07758e24f5d5bc9c6a17cc7722c80477/6766a/python3.webp 128w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/22bfc/python3.webp 256w,\n/static/07758e24f5d5bc9c6a17cc7722c80477/d689f/python3.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}}]},"previous":{"fields":{"slug":"/python-configparser/"},"frontmatter":{"title":"Pythonによる設定管理 - configparser"}},"next":{"fields":{"slug":"/python-csv/"},"frontmatter":{"title":"PythonのcsvモジュールでCSVファイルを扱う方法"}}},"pageContext":{"id":"471ab2c2-01cb-5cb3-ac1c-8b5b76b0d416","previousPostId":"12b8faec-2926-5f41-a174-047e95d88b1a","nextPostId":"2f6182b1-7502-5fb9-8ae4-8f6e46fa1788","relatedPosts":["/python-configparser/"]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}