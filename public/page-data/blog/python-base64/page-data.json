{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-base64/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"099be038-e7f2-52d6-9faa-f8469f84e5a5","excerpt":"Python でデータをエンコード・デコードする - base64 テキスト形式でのみバイナリデータ（画像やファイルなど）を取り扱う必要がある場面では、バイナリデータをエンコードする方法が重要です。Python 標準ライブラリの  モジュールは、Base64 や Base1…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#python-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B--base64\">Python でデータをエンコード・デコードする - base64</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%E6%A6%82%E8%A6%81\">1. 概要</a></p>\n<ul>\n<li><a href=\"#%E3%81%AA%E3%81%9C%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\">なぜバイナリデータをそのまま利用できないのか？</a></li>\n<li><a href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%81%A8%E4%BD%95%E3%81%8C%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B\">テキスト形式に変換すると何が解決するのか？</a></li>\n<li><a href=\"#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%92%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E9%80%9A%E4%BF%A1%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%97%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">バイナリをテキストにエンコードして通信可能にし、デコードして利用する</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-base64-%E3%81%A7%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">2. Base64 でエンコード/デコードする方法</a></p>\n<ul>\n<li>\n<p><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89\">エンコード</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E4%BE%8B\">基本的な使用例</a></li>\n<li><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA\">エンコード結果のカスタマイズ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\">デコード</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E4%BE%8B-1\">基本的な使用例</a></li>\n<li><a href=\"#code-classlanguage-textaltcharscode-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\"><code class=\"language-text\">altchars</code> を使ったデコード</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%E5%AE%9F%E7%94%A8%E4%BE%8B\">3. 実用例</a></p>\n<ul>\n<li>\n<p><a href=\"#url-%E3%81%AB%E5%AE%89%E5%85%A8%E3%81%AA%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89\">URL に安全なエンコード</a></p>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\">使用例</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%9B%BB%E5%AD%90%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%84-http-%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">電子メールや HTTP リクエスト</a></p>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-1\">使用例</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#json\">JSON</a></p>\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-2\">使用例</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#jwt\">JWT</a></p>\n<ul>\n<li><a href=\"#jwt-%E3%81%AE%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%81%A8%E3%83%9A%E3%82%A4%E3%83%AD%E3%83%BC%E3%83%89%E3%82%92%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\">JWT のヘッダーとペイロードをデコード</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%E7%B5%90%E8%AB%96\">4. 結論</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"python-でデータをエンコードデコードする--base64\" style=\"position:relative;\"><a href=\"#python-%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B--base64\" aria-label=\"python でデータをエンコードデコードする  base64 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python でデータをエンコード・デコードする - base64</h1>\n<p>テキスト形式でのみバイナリデータ（画像やファイルなど）を取り扱う必要がある場面では、バイナリデータをエンコードする方法が重要です。Python 標準ライブラリの <code class=\"language-text\">base64</code> モジュールは、Base64 や Base16 などの形式でデータを簡単にエンコード・デコードできる便利なツールです。本記事では、この <code class=\"language-text\">base64</code> モジュールの基本的な使い方から応用的な活用方法までを解説します。</p>\n<h2 id=\"1-概要\" style=\"position:relative;\"><a href=\"#1-%E6%A6%82%E8%A6%81\" aria-label=\"1 概要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 概要</h2>\n<p><code class=\"language-text\">base64</code> モジュールは、データをテキスト形式でエンコード・デコードするためのツールです。特に、バイナリデータ（画像、音声ファイルなど）をそのまま使用できない環境で役立ちます。</p>\n<h3 id=\"なぜバイナリデータをそのまま利用できないのか\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%81%9C%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" aria-label=\"なぜバイナリデータをそのまま利用できないのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なぜバイナリデータをそのまま利用できないのか？</h3>\n<p>多くの通信プロトコルやフォーマット（例: HTTP、電子メール、JSON）は、純粋なテキストデータしか扱えません。そのため、バイナリデータを直接これらのシステムで送信または保存しようとすると、不具合が発生したり、データが破損したりする可能性があります。</p>\n<p>バイナリデータには、制御文字やシステムで解釈される特殊なバイト（例: NULL 文字）が含まれることがあります。これらの文字は、通信や保存時にエラーを引き起こす原因となります。</p>\n<h3 id=\"テキスト形式に変換すると何が解決するのか\" style=\"position:relative;\"><a href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%81%A8%E4%BD%95%E3%81%8C%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B\" aria-label=\"テキスト形式に変換すると何が解決するのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>テキスト形式に変換すると何が解決するのか？</h3>\n<p>Base64 エンコードなどの方法を使用すると、バイナリデータをアルファベット（a-z, A-Z）や数字（0-9）、記号（+ / =)のみを含むテキスト形式に変換できます。これにより、次のような利点があります：</p>\n<ul>\n<li><strong>通信の互換性</strong>：電子メールや HTTP プロトコルで安全に送信可能。</li>\n<li><strong>可読性</strong>：JSON や XML の中に埋め込むことで、構造化データの一部として利用可能。</li>\n<li><strong>エラー防止</strong>：制御文字や特殊文字を除外するため、データ破損のリスクを低減。</li>\n</ul>\n<h3 id=\"バイナリをテキストにエンコードして通信可能にしデコードして利用する\" style=\"position:relative;\"><a href=\"#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%92%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E9%80%9A%E4%BF%A1%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%97%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\" aria-label=\"バイナリをテキストにエンコードして通信可能にしデコードして利用する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バイナリをテキストにエンコードして通信可能にし、デコードして利用する</h3>\n<p>Base64 はバイナリデータをテキストにエンコードすることで、テキスト形式しか扱えない環境でもデータの送受信を可能にします。データを受信した後は、デコードすることで元のバイナリデータに復元できます。この仕組みにより、安全かつ互換性の高いデータ転送が実現されます。</p>\n<p>具体的には、Base64 エンコードはバイナリデータをテキスト形式に変換することで、データを安全に転送し、処理する方法を提供します。この仕組みが多くの分野で採用されています。</p>\n<h2 id=\"2-base64-でエンコードデコードする方法\" style=\"position:relative;\"><a href=\"#2-base64-%E3%81%A7%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" aria-label=\"2 base64 でエンコードデコードする方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Base64 でエンコード/デコードする方法</h2>\n<h3 id=\"エンコード\" style=\"position:relative;\"><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"エンコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>エンコード</h3>\n<p>Base64 エンコードを行うには、<code class=\"language-text\">b64encode()</code> 関数を使用します。ただし、この関数はバイト列（<code class=\"language-text\">bytes</code> 型）を受け取るため、文字列（<code class=\"language-text\">str</code> 型）の場合は <code class=\"language-text\">encode()</code> を使って事前にバイト列に変換する必要があります。</p>\n<h4 id=\"基本的な使用例\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E4%BE%8B\" aria-label=\"基本的な使用例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本的な使用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n\n<span class=\"token comment\"># エンコード対象の文字列</span>\noriginal_str <span class=\"token operator\">=</span> <span class=\"token string\">\"Pythonは素晴らしい言語です。\"</span>\n\n<span class=\"token comment\"># バイト列に変換してエンコード</span>\nencoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>original_str<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'UHl0aG9u44Gu5a6i5LqL44Gn44GZ44CC'</span></code></pre></div>\n<h4 id=\"エンコード結果のカスタマイズ\" style=\"position:relative;\"><a href=\"#%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA\" aria-label=\"エンコード結果のカスタマイズ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>エンコード結果のカスタマイズ</h4>\n<p>デフォルトでは、「+」と「/」が Base64 エンコードの結果に含まれますが、<code class=\"language-text\">altchars</code> 引数を使うことでこれらの文字をカスタマイズできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># + を @ に、/ を * に置き換える</span>\ncustom_encoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>original_str<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> altchars<span class=\"token operator\">=</span><span class=\"token string\">b'@*'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>custom_encoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'UHl0aG9u44Gu5a6i5LqL44Gn44GZ44CC@*'</span></code></pre></div>\n<h3 id=\"デコード\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"デコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デコード</h3>\n<p>Base64 でエンコードされたデータを元に戻すには、<code class=\"language-text\">b64decode()</code> 関数を使用します。</p>\n<h4 id=\"基本的な使用例-1\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E4%BE%8B-1\" aria-label=\"基本的な使用例 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本的な使用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># デコード</span>\ndecoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"Pythonは素晴らしい言語です。\"</span></code></pre></div>\n<h4 id=\"code-classlanguage-textaltcharscode-を使ったデコード\" style=\"position:relative;\"><a href=\"#code-classlanguage-textaltcharscode-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"code classlanguage textaltcharscode を使ったデコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">altchars</code> を使ったデコード</h4>\n<p>エンコード時に <code class=\"language-text\">altchars</code> を使用した場合は、デコード時にも同じ <code class=\"language-text\">altchars</code> を指定する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># カスタムエンコードされたデータをデコード</span>\ncustom_decoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>custom_encoded<span class=\"token punctuation\">,</span> altchars<span class=\"token operator\">=</span><span class=\"token string\">b'@*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>custom_decoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"Pythonは素晴らしい言語です。\"</span></code></pre></div>\n<h2 id=\"3-実用例\" style=\"position:relative;\"><a href=\"#3-%E5%AE%9F%E7%94%A8%E4%BE%8B\" aria-label=\"3 実用例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 実用例</h2>\n<h3 id=\"url-に安全なエンコード\" style=\"position:relative;\"><a href=\"#url-%E3%81%AB%E5%AE%89%E5%85%A8%E3%81%AA%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"url に安全なエンコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL に安全なエンコード</h3>\n<p>Web アプリケーションでは、URL に安全な形式でデータをエンコードする必要があります。この場合、<code class=\"language-text\">urlsafe_b64encode()</code> と <code class=\"language-text\">urlsafe_b64decode()</code> を使用します。</p>\n<h4 id=\"使用例\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\" aria-label=\"使用例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n\n<span class=\"token comment\"># URLセーフなエンコード</span>\noriginal_str <span class=\"token operator\">=</span> <span class=\"token string\">\"データを安全にエンコード\"</span>\nurl_safe_encoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>urlsafe_b64encode<span class=\"token punctuation\">(</span>original_str<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>url_safe_encoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># URLセーフなBase64エンコード結果</span>\n\n<span class=\"token comment\"># URLセーフなデコード</span>\nurl_safe_decoded <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>urlsafe_b64decode<span class=\"token punctuation\">(</span>url_safe_encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>url_safe_decoded<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 元の文字列に戻る</span></code></pre></div>\n<p>URL のクエリパラメータやフォームデータに埋め込む場合に特に役立ちます。</p>\n<h3 id=\"電子メールや-http-リクエスト\" style=\"position:relative;\"><a href=\"#%E9%9B%BB%E5%AD%90%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%84-http-%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\" aria-label=\"電子メールや http リクエスト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>電子メールや HTTP リクエスト</h3>\n<p>電子メールや HTTP リクエストでバイナリデータをテキスト形式で送信する際に Base64 が役立ちます。たとえば、画像やファイルのデータをエンコードして送信することができます。</p>\n<h4 id=\"使用例-1\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-1\" aria-label=\"使用例 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n\n<span class=\"token comment\"># ファイルの読み込みとBase64エンコード</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    encoded_data <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encoded_data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># エンコードされたデータ</span>\n\n<span class=\"token comment\"># デコードして元のデータに戻す</span>\ndecoded_data <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>encoded_data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decoded_sample.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>decoded_data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>電子メールの添付ファイルや HTTP の POST リクエストの一部として利用可能です。</p>\n<h3 id=\"json\" style=\"position:relative;\"><a href=\"#json\" aria-label=\"json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON</h3>\n<p>画像データやバイナリデータを JSON に埋め込む場合にも Base64 が利用されます。これにより、バイナリデータを安全に JSON 形式で送信できます。</p>\n<h4 id=\"使用例-2\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-2\" aria-label=\"使用例 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用例</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token comment\"># 画像データをBase64エンコード</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> img_file<span class=\"token punctuation\">:</span>\n    encoded_img <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>img_file<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># JSONオブジェクトに埋め込む</span>\njson_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"image_data\"</span><span class=\"token punctuation\">:</span> encoded_img<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># JSON形式のデータ</span>\n\n<span class=\"token comment\"># JSONからデータをデコードして元の状態に戻す</span>\ndecoded_json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span>\ndecoded_img <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>decoded_json<span class=\"token punctuation\">[</span><span class=\"token string\">\"image_data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decoded_example.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> img_file<span class=\"token punctuation\">:</span>\n    img_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>decoded_img<span class=\"token punctuation\">)</span></code></pre></div>\n<p>これにより、画像やバイナリファイルを安全に API やデータベースに送信できます。</p>\n<h3 id=\"jwt\" style=\"position:relative;\"><a href=\"#jwt\" aria-label=\"jwt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT</h3>\n<p>Base64 は JWT（JSON Web Token）のデータエンコードにも使用されます。JWT は 3 つの部分（ヘッダー、ペイロード、署名）で構成され、それぞれ Base64 でエンコードされています。</p>\n<h4 id=\"jwt-のヘッダーとペイロードをデコード\" style=\"position:relative;\"><a href=\"#jwt-%E3%81%AE%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%81%A8%E3%83%9A%E3%82%A4%E3%83%AD%E3%83%BC%E3%83%89%E3%82%92%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"jwt のヘッダーとペイロードをデコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT のヘッダーとペイロードをデコード</h4>\n<p>以下は、JWT のヘッダーとペイロード部分をデコードする例です：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> base64\n\njwt_token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\"</span>\n    <span class=\"token string\">\"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\"</span>\n    <span class=\"token string\">\"sflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># JWTの各部分を分割</span>\nheader<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> signature <span class=\"token operator\">=</span> jwt_token<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ヘッダーをデコード</span>\nheader_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>urlsafe_b64decode<span class=\"token punctuation\">(</span>header <span class=\"token operator\">+</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Header:\"</span><span class=\"token punctuation\">,</span> header_data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ペイロードをデコード</span>\npayload_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>urlsafe_b64decode<span class=\"token punctuation\">(</span>payload <span class=\"token operator\">+</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Payload:\"</span><span class=\"token punctuation\">,</span> payload_data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>JWT の構造を理解し、必要に応じてデータを検証する際に役立ちます。</p>\n<h2 id=\"4-結論\" style=\"position:relative;\"><a href=\"#4-%E7%B5%90%E8%AB%96\" aria-label=\"4 結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 結論</h2>\n<p><code class=\"language-text\">base64</code> モジュールは、バイナリデータを扱う際に非常に便利なツールです。エンコード・デコードの基本的な使い方から、応用的な活用方法まで幅広くサポートしており、特に Web 開発やデータ転送の場面で活躍します。このモジュールを活用し、安全かつ効率的なデータ操作を実現しましょう！</p>","frontmatter":{"title":"Pythonでデータをエンコード・デコードする - base64","date":"2025-02-08","description":"Pythonの標準ライブラリbase64を使い、バイナリデータをエンコード・デコードする方法を詳しく解説します。Web開発やデータ転送で役立つ実用例も紹介します。","tags":["Python","base64"],"featuredImage":{"publicURL":"/static/58806ff8f67ddf870a8d9902f47dcd61/python2.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg","srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/19e71/python2.jpg 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/68974/python2.jpg 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/6766a/python2.webp 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/22bfc/python2.webp 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/d689f/python2.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[]},"previous":{"fields":{"slug":"/python-dateutil/"},"frontmatter":{"title":"Pythonの日付操作をより便利にする強力なサードパーティライブラリ - dateutil"}},"next":{"fields":{"slug":"/python-timeit/"},"frontmatter":{"title":"Pythonでコード実行時間を計測する - timeit"}}},"pageContext":{"id":"099be038-e7f2-52d6-9faa-f8469f84e5a5","previousPostId":"0e2362aa-79b8-545b-96c2-f19b6e2c8870","nextPostId":"b2e2e472-1dab-5538-9922-d0e80d1969a7","relatedPosts":[]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}