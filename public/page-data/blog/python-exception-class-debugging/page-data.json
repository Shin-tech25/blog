{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/python-exception-class-debugging/","result":{"data":{"site":{"siteMetadata":{"title":"Developer's blog"}},"markdownRemark":{"id":"4c5705c9-6efd-57be-a1f8-d40541e44982","excerpt":"Python における例外クラスの特定方法 Python…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#python-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%89%B9%E5%AE%9A%E6%96%B9%E6%B3%95\">Python における例外クラスの特定方法</a></p>\n<ul>\n<li>\n<p><a href=\"#%E3%81%AA%E3%81%9C%E9%81%A9%E5%88%87%E3%81%AA%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%86%E3%81%B9%E3%81%8D%E3%81%8B\">なぜ適切な例外クラスを使うべきか？</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%89%B9%E5%AE%9A%E6%96%B9%E6%B3%95\">例外クラスの特定方法</a></p>\n<ul>\n<li><a href=\"#%E3%81%93%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\">このコードの仕組み</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E8%B7%B5%E4%BE%8B-%E6%97%A2%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96%E3%81%A8%E6%9C%AA%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E6%89%B1%E3%81%86\">実践例: 既知の例外と未知の例外を扱う</a></p>\n<ul>\n<li><a href=\"#%E3%81%93%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81%E3%81%AE%E5%88%A9%E7%82%B9\">このアプローチの利点</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E4%BE%8B\">実行結果例</a></p>\n<ul>\n<li><a href=\"#%E6%97%A2%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96\">既知の例外</a></li>\n<li><a href=\"#%E6%9C%AA%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96\">未知の例外</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E6%B4%BB%E7%94%A8%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\">開発中の活用ポイント</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></p>\n</li>\n</ul>\n</li>\n</ul>","html":"<h2 id=\"python-における例外クラスの特定方法\" style=\"position:relative;\"><a href=\"#python-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%89%B9%E5%AE%9A%E6%96%B9%E6%B3%95\" aria-label=\"python における例外クラスの特定方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python における例外クラスの特定方法</h2>\n<p>Python で例外処理を記述する際には、適切な例外クラスを指定することが推奨されています。これにより、コードの意図が明確になり、予期しないエラーをより正確に処理できるようになります。しかし、実装中にどの例外が実際に発生するのかを把握するのは難しい場合があります。そのような状況では、例外クラスを動的に特定するための方法が役立ちます。</p>\n<h3 id=\"なぜ適切な例外クラスを使うべきか\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%81%9C%E9%81%A9%E5%88%87%E3%81%AA%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%86%E3%81%B9%E3%81%8D%E3%81%8B\" aria-label=\"なぜ適切な例外クラスを使うべきか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なぜ適切な例外クラスを使うべきか？</h3>\n<p>Python では、すべての例外は<code class=\"language-text\">BaseException</code>クラスを基底としており、その下に<code class=\"language-text\">Exception</code>クラスが位置しています。<code class=\"language-text\">Exception</code>クラスを指定するとほぼすべての実用的な例外を補足できますが、これではエラーの特定が困難になりがちです。適切な例外クラスを指定することで、以下のメリットがあります。</p>\n<ol>\n<li><strong>明確なエラー処理</strong>: 例外クラスが明確であれば、特定のエラーに対する専用の処理を実装できます。</li>\n<li><strong>予期しないエラーの防止</strong>: 必要な例外以外を捕捉するリスクを減らせます。</li>\n<li><strong>デバッグ効率の向上</strong>: エラーの発生箇所や原因を特定しやすくなります。</li>\n</ol>\n<h3 id=\"例外クラスの特定方法\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%E5%A4%96%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%89%B9%E5%AE%9A%E6%96%B9%E6%B3%95\" aria-label=\"例外クラスの特定方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例外クラスの特定方法</h3>\n<p>実装中にどの例外が発生するのか不明な場合、次のようなコードスニペットを使用すると、発生した例外クラスを動的に特定できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 実行する関数</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 発生した例外クラスを表示</span>\n    <span class=\"token keyword\">raise</span>  <span class=\"token comment\"># 例外を再送</span></code></pre></div>\n<h4 id=\"このコードの仕組み\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\" aria-label=\"このコードの仕組み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>このコードの仕組み</h4>\n<ol>\n<li><strong><code class=\"language-text\">try</code>ブロック</strong>: <code class=\"language-text\">func()</code>のような処理を実行します。</li>\n<li><strong><code class=\"language-text\">except</code>ブロック</strong>: 例外が発生した場合に補足し、<code class=\"language-text\">type(e)</code>で例外クラスを表示します。</li>\n<li><strong><code class=\"language-text\">raise</code>文</strong>: 捕捉した例外を再度送出します。これにより、デバッグ用の情報を取得しつつ、元の例外処理フローを維持できます。</li>\n</ol>\n<h3 id=\"実践例-既知の例外と未知の例外を扱う\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%B7%B5%E4%BE%8B-%E6%97%A2%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96%E3%81%A8%E6%9C%AA%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E6%89%B1%E3%81%86\" aria-label=\"実践例 既知の例外と未知の例外を扱う permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実践例: 既知の例外と未知の例外を扱う</h3>\n<p>開発中には、発生しうる例外の種類が明確でない場合があります。このような場合には、既知の例外クラスを指定しつつ、未知の例外を補足するために<code class=\"language-text\">Exception</code>を利用するアプローチが有効です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">:</span>\n        lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> lst<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># IndexError</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span>\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"nonexistent_key\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># KeyError</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token keyword\">case</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"string\"</span>  <span class=\"token comment\"># TypeError</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    func<span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>IndexError<span class=\"token punctuation\">,</span> KeyError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"既知の例外が発生しました: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 必要に応じてここで個別処理を実装</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"未知の例外が発生しました: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># デバッグのために例外クラスを特定</span>\n    <span class=\"token keyword\">raise</span></code></pre></div>\n<h4 id=\"このアプローチの利点\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81%E3%81%AE%E5%88%A9%E7%82%B9\" aria-label=\"このアプローチの利点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>このアプローチの利点</h4>\n<ol>\n<li>予測可能な例外に対しては、それぞれ適切な処理を実装できます。</li>\n<li><code class=\"language-text\">Exception</code>を使用することで、未知の例外も補足しデバッグ可能です。</li>\n<li>デバッグ中に発生する例外クラスの情報を収集し、後で具体的な例外クラスを追加することで、エラー処理を洗練させることができます。</li>\n</ol>\n<h3 id=\"実行結果例\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E4%BE%8B\" aria-label=\"実行結果例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実行結果例</h3>\n<p>上記のコードを実行すると、以下のような出力が得られます。</p>\n<h4 id=\"既知の例外\" style=\"position:relative;\"><a href=\"#%E6%97%A2%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96\" aria-label=\"既知の例外 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>既知の例外</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">既知の例外が発生しました: <span class=\"token operator\">&lt;</span>class <span class=\"token string\">'IndexError'</span><span class=\"token operator\">></span> - list index out of range</code></pre></div>\n<h4 id=\"未知の例外\" style=\"position:relative;\"><a href=\"#%E6%9C%AA%E7%9F%A5%E3%81%AE%E4%BE%8B%E5%A4%96\" aria-label=\"未知の例外 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>未知の例外</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">未知の例外が発生しました: <span class=\"token operator\">&lt;</span>class <span class=\"token string\">'TypeError'</span><span class=\"token operator\">></span> - unsupported operand type<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> +: <span class=\"token string\">'int'</span> and <span class=\"token string\">'str'</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"example.py\"</span>, line <span class=\"token number\">15</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    func<span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"example.py\"</span>, line <span class=\"token number\">8</span>, <span class=\"token keyword\">in</span> func\n    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">1</span> + <span class=\"token string\">\"string\"</span>  <span class=\"token comment\"># TypeError</span>\nTypeError: unsupported operand type<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> +: <span class=\"token string\">'int'</span> and <span class=\"token string\">'str'</span></code></pre></div>\n<p>この結果から、デバッグ段階で未知の例外を確認し、それに基づいてコードを改善するプロセスが明確になります。</p>\n<h3 id=\"開発中の活用ポイント\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E6%B4%BB%E7%94%A8%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\" aria-label=\"開発中の活用ポイント permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開発中の活用ポイント</h3>\n<ol>\n<li><strong>具体的な例外クラスを特定</strong>: デバッグ中に確認した例外クラスを元に、<code class=\"language-text\">except</code>節を更新して処理を追加します。</li>\n<li><strong>ログの活用</strong>: デバッグ用に例外クラスやエラーメッセージを記録しておくと便利です。</li>\n<li><strong>デバッグ終了後にリファクタリング</strong>: 開発が進むにつれ、例外の種類が明確になるため、不要な<code class=\"language-text\">Exception</code>節を削除してコードを簡潔にします。</li>\n</ol>\n<h3 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h3>\n<p>Python では、例外処理を段階的に設計することで、未知の例外を補足しつつコードを改善することができます。まずは既知の例外を指定し、未知の例外に対しては<code class=\"language-text\">Exception</code>を活用してデバッグ情報を収集することで、適切なエラーハンドリングを実現できます。このプロセスを繰り返すことで、より堅牢なコードを構築しましょう。</p>","frontmatter":{"title":"Pythonで例外クラスを特定する方法：デバッグから学ぶエラーハンドリング","date":"2025-01-17","description":"Pythonで例外クラスを適切に特定することで、エラーハンドリングを強化する方法について解説します。開発中に未知の例外に対応する実践的なアプローチも紹介。","tags":["Python","例外処理"],"featuredImage":{"publicURL":"/static/58806ff8f67ddf870a8d9902f47dcd61/python2.jpg","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg","srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/19e71/python2.jpg 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/68974/python2.jpg 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/3c367/python2.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/58806ff8f67ddf870a8d9902f47dcd61/6766a/python2.webp 128w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/22bfc/python2.webp 256w,\n/static/58806ff8f67ddf870a8d9902f47dcd61/d689f/python2.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}}}}},"relatedPosts":{"nodes":[]},"previous":{"fields":{"slug":"/dnf-error-check/"},"frontmatter":{"title":"RHEL系OSでリポジトリ構成のエラーを検証する方法"}},"next":{"fields":{"slug":"/arm-vs-intel-architecture/"},"frontmatter":{"title":"64ビットARMとIntelアーキテクチャの違い"}}},"pageContext":{"id":"4c5705c9-6efd-57be-a1f8-d40541e44982","previousPostId":"6cbd55dc-f3f3-57e2-b204-fe770644b1b2","nextPostId":"2402e61a-9b26-59c4-ae16-107e98ad0a45","relatedPosts":[]}},"staticQueryHashes":["2841359383"],"slicesMap":{}}