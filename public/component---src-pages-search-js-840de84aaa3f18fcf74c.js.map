{"version":3,"file":"component---src-pages-search-js-840de84aaa3f18fcf74c.js","mappings":"0LASA,SAASA,EAAQC,GACf,OAAQC,MAAMF,QAEVE,MAAMF,QAAQC,GADI,mBAAlBE,EAAOF,EAEb,CAGA,MAAMG,EAAW,IAUjB,SAAS,EAASH,GAChB,OAAgB,MAATA,EAAgB,GAVzB,SAAsBA,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAII,EAASJ,EAAQ,GACrB,MAAiB,KAAVI,GAAiB,EAAIJ,IAAUG,EAAW,KAAOC,CAC1D,CAG8BC,CAAaL,EAC3C,CAEA,SAASM,EAASN,GAChB,MAAwB,iBAAVA,CAChB,CAEA,SAASO,EAASP,GAChB,MAAwB,iBAAVA,CAChB,CAGA,SAASQ,EAAUR,GACjB,OACY,IAAVA,IACU,IAAVA,GAUJ,SAAsBA,GACpB,OAAOS,EAAST,IAAoB,OAAVA,CAC5B,CAXKU,CAAaV,IAA2B,oBAAjBE,EAAOF,EAEnC,CAEA,SAASS,EAAST,GAChB,MAAwB,iBAAVA,CAChB,CAOA,SAASW,EAAUX,GACjB,OAAOA,OACT,CAEA,SAASY,EAAQZ,GACf,OAAQA,EAAMa,OAAOC,MACvB,CAIA,SAASZ,EAAOF,GACd,OAAgB,MAATA,OACOe,IAAVf,EACE,qBACA,gBACFgB,OAAOC,UAAUC,SAASC,KAAKnB,EACrC,CAEA,MAUMoB,EAAwBC,GAAS,WAAWA,oBAE5CC,EAA4BC,GAChC,6BAA6BA,gCAEzBC,EAASR,OAAOC,UAAUQ,eAEhC,MAAMC,EACJ,WAAAC,CAAYC,GACVC,KAAKC,MAAQ,GACbD,KAAKE,QAAU,CAAC,EAEhB,IAAIC,EAAc,EAElBJ,EAAKK,SAASV,IACZ,IAAIW,EAAMC,EAAUZ,GAEpBM,KAAKC,MAAMM,KAAKF,GAChBL,KAAKE,QAAQG,EAAIG,IAAMH,EAEvBF,GAAeE,EAAII,MAAM,IAI3BT,KAAKC,MAAMG,SAASV,IAClBA,EAAIe,QAAUN,CAAW,GAE7B,CACA,GAAAO,CAAIC,GACF,OAAOX,KAAKE,QAAQS,EACtB,CACA,IAAAZ,GACE,OAAOC,KAAKC,KACd,CACA,MAAAW,GACE,OAAOC,KAAKC,UAAUd,KAAKC,MAC7B,EAGF,SAASK,EAAUZ,GACjB,IAAIqB,EAAO,KACPP,EAAK,KACLQ,EAAM,KACNP,EAAS,EACTQ,EAAQ,KAEZ,GAAIxC,EAASiB,IAAQxB,EAAQwB,GAC3BsB,EAAMtB,EACNqB,EAAOG,EAAcxB,GACrBc,EAAKW,EAAYzB,OACZ,CACL,IAAKC,EAAOL,KAAKI,EAAK,QACpB,MAAM,IAAI0B,MAAM7B,EAAqB,SAGvC,MAAMC,EAAOE,EAAIF,KAGjB,GAFAwB,EAAMxB,EAEFG,EAAOL,KAAKI,EAAK,YACnBe,EAASf,EAAIe,OAETA,GAAU,GACZ,MAAM,IAAIW,MAAM3B,EAAyBD,IAI7CuB,EAAOG,EAAc1B,GACrBgB,EAAKW,EAAY3B,GACjByB,EAAQvB,EAAIuB,KACd,CAEA,MAAO,CAAEF,OAAMP,KAAIC,SAAQO,MAAKC,QAClC,CAEA,SAASC,EAAcxB,GACrB,OAAOxB,EAAQwB,GAAOA,EAAMA,EAAI2B,MAAM,IACxC,CAEA,SAASF,EAAYzB,GACnB,OAAOxB,EAAQwB,GAAOA,EAAI4B,KAAK,KAAO5B,CACxC,CA6GA,IAAI6B,EAAS,CA9CXC,iBAAiB,EAEjBC,kBAAkB,EAElBC,cAAc,EAEd3B,KAAM,GAEN4B,YAAY,EAEZC,OAAQ,CAACC,EAAGC,IACVD,EAAEE,QAAUD,EAAEC,MAASF,EAAEG,IAAMF,EAAEE,KAAO,EAAI,EAAKH,EAAEE,MAAQD,EAAEC,OAAS,EAAI,EAtB5EE,gBAAgB,EAGhBC,gBAAgB,EAEhBC,mBAAoB,EAsBpBC,SAAU,EAGVC,UAAW,GAMXC,SAAU,OAGY,CAEtBC,mBAAmB,EAGnBtB,MA9FF,SAAaZ,EAAKU,GAChB,IAAIyB,EAAO,GACPC,GAAM,EAEV,MAAMC,EAAU,CAACrC,EAAKU,EAAM4B,KAC1B,GAAK7D,EAAUuB,GAGf,GAAKU,EAAK4B,GAGH,CAGL,MAAMxE,EAAQkC,EAFJU,EAAK4B,IAIf,IAAK7D,EAAUX,GACb,OAKF,GACEwE,IAAU5B,EAAK9B,OAAS,IACvBR,EAASN,IAAUO,EAASP,IAAUQ,EAAUR,IAEjDqE,EAAKjC,KAAK,EAASpC,SACd,GAAID,EAAQC,GAAQ,CACzBsE,GAAM,EAEN,IAAK,IAAIG,EAAI,EAAGC,EAAM1E,EAAMc,OAAQ2D,EAAIC,EAAKD,GAAK,EAChDF,EAAQvE,EAAMyE,GAAI7B,EAAM4B,EAAQ,EAEpC,MAAW5B,EAAK9B,QAEdyD,EAAQvE,EAAO4C,EAAM4B,EAAQ,EAEjC,MA3BEH,EAAKjC,KAAKF,EA2BZ,EAMF,OAFAqC,EAAQrC,EAAK5B,EAASsC,GAAQA,EAAKM,MAAM,KAAON,EAAM,GAE/C0B,EAAMD,EAAOA,EAAK,EAC3B,EAsDEM,gBAAgB,EAIhBC,iBAAiB,EAEjBC,gBAAiB,IAUnB,MAAMC,EAAQ,SAgCd,MAAMC,EACJ,WAAApD,EAAY,MACVmB,EAAQM,EAAON,MAAK,gBACpB+B,EAAkBzB,EAAOyB,iBACvB,CAAC,GACHhD,KAAKmD,KAjCT,SAAc1C,EAAS,EAAG2C,EAAW,GACnC,MAAMC,EAAQ,IAAIC,IACZC,EAAIC,KAAKC,IAAI,GAAIL,GAEvB,MAAO,CACL,GAAA1C,CAAIvC,GACF,MAAMuF,EAAYvF,EAAMwF,MAAMV,GAAOhE,OAErC,GAAIoE,EAAMO,IAAIF,GACZ,OAAOL,EAAM3C,IAAIgD,GAInB,MAAMP,EAAO,EAAIK,KAAKC,IAAIC,EAAW,GAAMjD,GAGrCoD,EAAIC,WAAWN,KAAKO,MAAMZ,EAAOI,GAAKA,GAI5C,OAFAF,EAAMW,IAAIN,EAAWG,GAEdA,CACT,EACA,KAAAI,GACEZ,EAAMY,OACR,EAEJ,CAOgBd,CAAKH,EAAiB,GAClChD,KAAKiB,MAAQA,EACbjB,KAAKkE,WAAY,EAEjBlE,KAAKmE,iBACP,CACA,UAAAC,CAAWC,EAAO,IAChBrE,KAAKqE,KAAOA,CACd,CACA,eAAAF,CAAgBG,EAAU,IACxBtE,KAAKsE,QAAUA,CACjB,CACA,OAAAC,CAAQxE,EAAO,IACbC,KAAKD,KAAOA,EACZC,KAAKwE,SAAW,CAAC,EACjBzE,EAAKK,SAAQ,CAACV,EAAKsC,KACjBhC,KAAKwE,SAAS9E,EAAIc,IAAMwB,CAAG,GAE/B,CACA,MAAAyC,IACMzE,KAAKkE,WAAclE,KAAKqE,KAAKpF,SAIjCe,KAAKkE,WAAY,EAGbzF,EAASuB,KAAKqE,KAAK,IACrBrE,KAAKqE,KAAKjE,SAAQ,CAACsE,EAAKC,KACtB3E,KAAK4E,WAAWF,EAAKC,EAAS,IAIhC3E,KAAKqE,KAAKjE,SAAQ,CAACsE,EAAKC,KACtB3E,KAAK6E,WAAWH,EAAKC,EAAS,IAIlC3E,KAAKmD,KAAKc,QACZ,CAEA,GAAAa,CAAIJ,GACF,MAAM1C,EAAMhC,KAAK+E,OAEbtG,EAASiG,GACX1E,KAAK4E,WAAWF,EAAK1C,GAErBhC,KAAK6E,WAAWH,EAAK1C,EAEzB,CAEA,QAAAgD,CAAShD,GACPhC,KAAKsE,QAAQW,OAAOjD,EAAK,GAGzB,IAAK,IAAIY,EAAIZ,EAAKa,EAAM7C,KAAK+E,OAAQnC,EAAIC,EAAKD,GAAK,EACjD5C,KAAKsE,QAAQ1B,GAAGA,GAAK,CAEzB,CACA,sBAAAsC,CAAuBC,EAAMxE,GAC3B,OAAOwE,EAAKnF,KAAKwE,SAAS7D,GAC5B,CACA,IAAAoE,GACE,OAAO/E,KAAKsE,QAAQrF,MACtB,CACA,UAAA2F,CAAWF,EAAKC,GACd,IAAK7F,EAAU4F,IAAQ3F,EAAQ2F,GAC7B,OAGF,IAAIU,EAAS,CACXC,EAAGX,EACH9B,EAAG+B,EACHd,EAAG7D,KAAKmD,KAAKzC,IAAIgE,IAGnB1E,KAAKsE,QAAQ/D,KAAK6E,EACpB,CACA,UAAAP,CAAWH,EAAKC,GACd,IAAIS,EAAS,CAAExC,EAAG+B,EAAUW,EAAG,CAAC,GAGhCtF,KAAKD,KAAKK,SAAQ,CAACV,EAAK6F,KACtB,IAAIpH,EAAQuB,EAAIuB,MAAQvB,EAAIuB,MAAMyD,GAAO1E,KAAKiB,MAAMyD,EAAKhF,EAAIqB,MAE7D,GAAKjC,EAAUX,GAIf,GAAID,EAAQC,GAAQ,CAClB,IAAIqH,EAAa,GACjB,MAAMC,EAAQ,CAAC,CAAEC,gBAAiB,EAAGvH,UAErC,KAAOsH,EAAMxG,QAAQ,CACnB,MAAM,eAAEyG,EAAc,MAAEvH,GAAUsH,EAAME,MAExC,GAAK7G,EAAUX,GAIf,GAAIM,EAASN,KAAWY,EAAQZ,GAAQ,CACtC,IAAIyH,EAAY,CACdP,EAAGlH,EACHyE,EAAG8C,EACH7B,EAAG7D,KAAKmD,KAAKzC,IAAIvC,IAGnBqH,EAAWjF,KAAKqF,EAClB,MAAW1H,EAAQC,IACjBA,EAAMiC,SAAQ,CAAC+E,EAAMU,KACnBJ,EAAMlF,KAAK,CACTmF,eAAgBG,EAChB1H,MAAOgH,GACP,GAGR,CACAC,EAAOE,EAAEC,GAAYC,CACvB,MAAO,GAAI/G,EAASN,KAAWY,EAAQZ,GAAQ,CAC7C,IAAIyH,EAAY,CACdP,EAAGlH,EACH0F,EAAG7D,KAAKmD,KAAKzC,IAAIvC,IAGnBiH,EAAOE,EAAEC,GAAYK,CACvB,KAGF5F,KAAKsE,QAAQ/D,KAAK6E,EACpB,CACA,MAAAxE,GACE,MAAO,CACLb,KAAMC,KAAKD,KACXuE,QAAStE,KAAKsE,QAElB,EAGF,SAASwB,EACP/F,EACAsE,GACA,MAAEpD,EAAQM,EAAON,MAAK,gBAAE+B,EAAkBzB,EAAOyB,iBAAoB,CAAC,GAEtE,MAAM+C,EAAU,IAAI7C,EAAU,CAAEjC,QAAO+B,oBAIvC,OAHA+C,EAAQxB,QAAQxE,EAAKiG,IAAI1F,IACzByF,EAAQ3B,WAAWC,GACnB0B,EAAQtB,SACDsB,CACT,CAaA,SAASE,EACPC,GACA,OACEC,EAAS,EAAC,gBACVC,EAAkB,EAAC,iBACnBC,EAAmB,EAAC,SACpB/D,EAAWf,EAAOe,SAAQ,eAC1BQ,EAAiBvB,EAAOuB,gBACtB,CAAC,GAEL,MAAMwD,EAAWH,EAASD,EAAQjH,OAElC,GAAI6D,EACF,OAAOwD,EAGT,MAAMC,EAAY/C,KAAKgD,IAAIH,EAAmBD,GAE9C,OAAK9D,EAKEgE,EAAWC,EAAYjE,EAHrBiE,EAAY,EAAMD,CAI7B,CAiCA,MAAMG,EAAW,GAEjB,SAASC,EACPC,EACAT,EACAU,GACA,SACExE,EAAWb,EAAOa,SAAQ,SAC1BE,EAAWf,EAAOe,SAAQ,UAC1BD,EAAYd,EAAOc,UAAS,eAC5BH,EAAiBX,EAAOW,eAAc,mBACtCC,EAAqBZ,EAAOY,mBAAkB,eAC9CF,EAAiBV,EAAOU,eAAc,eACtCa,EAAiBvB,EAAOuB,gBACtB,CAAC,GAEL,GAAIoD,EAAQjH,OAASwH,EACnB,MAAM,IAAIrF,MAtdZ,iCAsd2CqF,MAG3C,MAAMI,EAAaX,EAAQjH,OAErB6H,EAAUH,EAAK1H,OAEfoH,EAAmB7C,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI5E,EAAU0E,IAExD,IAAIG,EAAmB5E,EAEnB6E,EAAeb,EAInB,MAAMc,EAAiBhF,EAAqB,GAAKF,EAE3CmF,EAAYD,EAAiB/I,MAAM0I,GAAW,GAEpD,IAAInE,EAGJ,MAAQA,EAAQgE,EAAKU,QAAQnB,EAASgB,KAAkB,GAAG,CACzD,IAAInF,EAAQkE,EAAeC,EAAS,CAClCE,gBAAiBzD,EACjB0D,mBACA/D,WACAQ,mBAMF,GAHAmE,EAAmBzD,KAAKwD,IAAIjF,EAAOkF,GACnCC,EAAevE,EAAQkE,EAEnBM,EAAgB,CAClB,IAAIvE,EAAI,EACR,KAAOA,EAAIiE,GACTO,EAAUzE,EAAQC,GAAK,EACvBA,GAAK,CAET,CACF,CAGAsE,GAAgB,EAEhB,IAAII,EAAa,GACbC,EAAa,EACbC,EAASX,EAAaC,EAE1B,MAAMW,EAAO,GAAMZ,EAAa,EAEhC,IAAK,IAAIjE,EAAI,EAAGA,EAAIiE,EAAYjE,GAAK,EAAG,CAItC,IAAI8E,EAAS,EACTC,EAASH,EAEb,KAAOE,EAASC,GAAQ,CACR1B,EAAeC,EAAS,CACpCC,OAAQvD,EACRwD,gBAAiBC,EAAmBsB,EACpCtB,mBACA/D,WACAQ,oBAGWmE,EACXS,EAASC,EAETH,EAASG,EAGXA,EAASnE,KAAKoE,OAAOJ,EAASE,GAAU,EAAIA,EAC9C,CAGAF,EAASG,EAET,IAAIE,EAAQrE,KAAKuD,IAAI,EAAGV,EAAmBsB,EAAS,GAChDG,EAAS5F,EACT4E,EACAtD,KAAKwD,IAAIX,EAAmBsB,EAAQb,GAAWD,EAG/CkB,EAAS3J,MAAM0J,EAAS,GAE5BC,EAAOD,EAAS,IAAM,GAAKlF,GAAK,EAEhC,IAAK,IAAIoF,EAAIF,EAAQE,GAAKH,EAAOG,GAAK,EAAG,CACvC,IAAI5B,EAAkB4B,EAAI,EACtBC,EAAYrB,EAAgBD,EAAKuB,OAAO9B,IAgB5C,GAdIe,IAEFC,EAAUhB,MAAsB6B,GAIlCF,EAAOC,IAAOD,EAAOC,EAAI,IAAM,EAAK,GAAKC,EAGrCrF,IACFmF,EAAOC,KACHV,EAAWU,EAAI,GAAKV,EAAWU,KAAO,EAAK,EAAIV,EAAWU,EAAI,IAGhED,EAAOC,GAAKP,IACdF,EAAatB,EAAeC,EAAS,CACnCC,OAAQvD,EACRwD,kBACAC,mBACA/D,WACAQ,mBAKEyE,GAAcN,GAAkB,CAMlC,GAJAA,EAAmBM,EACnBL,EAAed,EAGXc,GAAgBb,EAClB,MAIFwB,EAAQrE,KAAKuD,IAAI,EAAG,EAAIV,EAAmBa,EAC7C,CAEJ,CAWA,GARcjB,EAAeC,EAAS,CACpCC,OAAQvD,EAAI,EACZwD,gBAAiBC,EACjBA,mBACA/D,WACAQ,mBAGUmE,EACV,MAGFK,EAAaS,CACf,CAEA,MAAMxJ,EAAS,CACb4J,QAASjB,GAAgB,EAEzBnF,MAAOyB,KAAKuD,IAAI,KAAOQ,IAGzB,GAAIJ,EAAgB,CAClB,MAAMiB,EA7MV,SACEC,EAAY,GACZlG,EAAqBZ,EAAOY,oBAE5B,IAAIiG,EAAU,GACVP,GAAS,EACTS,GAAO,EACP1F,EAAI,EAER,IAAK,IAAIC,EAAMwF,EAAUpJ,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CAChD,IAAIe,EAAQ0E,EAAUzF,GAClBe,IAAoB,IAAXkE,EACXA,EAAQjF,EACEe,IAAoB,IAAXkE,IACnBS,EAAM1F,EAAI,EACN0F,EAAMT,EAAQ,GAAK1F,GACrBiG,EAAQ7H,KAAK,CAACsH,EAAOS,IAEvBT,GAAS,EAEb,CAOA,OAJIQ,EAAUzF,EAAI,IAAMA,EAAIiF,GAAS1F,GACnCiG,EAAQ7H,KAAK,CAACsH,EAAOjF,EAAI,IAGpBwF,CACT,CAiLoBG,CAAqBnB,EAAWjF,GAC3CiG,EAAQnJ,OAEFgD,IACT1D,EAAO6J,QAAUA,GAFjB7J,EAAO4J,SAAU,CAIrB,CAEA,OAAO5J,CACT,CAEA,SAASiK,EAAsBtC,GAC7B,IAAIuB,EAAO,CAAC,EAEZ,IAAK,IAAI7E,EAAI,EAAGC,EAAMqD,EAAQjH,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CACrD,MAAM6F,EAAOvC,EAAQgC,OAAOtF,GAC5B6E,EAAKgB,IAAShB,EAAKgB,IAAS,GAAM,GAAM5F,EAAMD,EAAI,CACpD,CAEA,OAAO6E,CACT,CAEA,MAAMiB,EAAkBC,OAAOvJ,UAAUwJ,UACjCC,GAAQA,EAAID,UAAU,OAAOE,QAAQ,ykEAA0kE,IAC/mED,GAAQA,EAEhB,MAAME,EACJ,WAAAjJ,CACEoG,GACA,SACE9D,EAAWb,EAAOa,SAAQ,UAC1BC,EAAYd,EAAOc,UAAS,SAC5BC,EAAWf,EAAOe,SAAQ,eAC1BL,EAAiBV,EAAOU,eAAc,eACtCC,EAAiBX,EAAOW,eAAc,mBACtCC,EAAqBZ,EAAOY,mBAAkB,gBAC9CX,EAAkBD,EAAOC,gBAAe,iBACxCC,EAAmBF,EAAOE,iBAAgB,eAC1CqB,EAAiBvB,EAAOuB,gBACtB,CAAC,GAoBL,GAlBA9C,KAAKgJ,QAAU,CACb5G,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAX,kBACAC,mBACAqB,kBAGFoD,EAAU1E,EAAkB0E,EAAUA,EAAQ+C,cAC9C/C,EAAUzE,EAAmBiH,EAAgBxC,GAAWA,EACxDlG,KAAKkG,QAAUA,EAEflG,KAAKkJ,OAAS,IAETlJ,KAAKkG,QAAQjH,OAChB,OAGF,MAAMkK,EAAW,CAACjD,EAASkD,KACzBpJ,KAAKkJ,OAAO3I,KAAK,CACf2F,UACAmD,SAAUb,EAAsBtC,GAChCkD,cACA,EAGEvG,EAAM7C,KAAKkG,QAAQjH,OAEzB,GAAI4D,EAAM4D,EAAU,CAClB,IAAI7D,EAAI,EACR,MAAM0G,EAAYzG,EAAM4D,EAClB6B,EAAMzF,EAAMyG,EAElB,KAAO1G,EAAI0F,GACTa,EAASnJ,KAAKkG,QAAQqD,OAAO3G,EAAG6D,GAAW7D,GAC3CA,GAAK6D,EAGP,GAAI6C,EAAW,CACb,MAAMF,EAAavG,EAAM4D,EACzB0C,EAASnJ,KAAKkG,QAAQqD,OAAOH,GAAaA,EAC5C,CACF,MACED,EAASnJ,KAAKkG,QAAS,EAE3B,CAEA,QAAAsD,CAAS7C,GACP,MAAM,gBAAEnF,EAAe,iBAAEC,EAAgB,eAAEQ,GAAmBjC,KAAKgJ,QAMnE,GAJArC,EAAOnF,EAAkBmF,EAAOA,EAAKsC,cACrCtC,EAAOlF,EAAmBiH,EAAgB/B,GAAQA,EAG9C3G,KAAKkG,UAAYS,EAAM,CACzB,IAAIpI,EAAS,CACX4J,SAAS,EACTpG,MAAO,GAOT,OAJIE,IACF1D,EAAO6J,QAAU,CAAC,CAAC,EAAGzB,EAAK1H,OAAS,KAG/BV,CACT,CAGA,MAAM,SACJ6D,EAAQ,SACRE,EAAQ,UACRD,EAAS,eACTH,EAAc,mBACdC,EAAkB,eAClBW,GACE9C,KAAKgJ,QAET,IAAIS,EAAa,GACbC,EAAa,EACbC,GAAa,EAEjB3J,KAAKkJ,OAAO9I,SAAQ,EAAG8F,UAASmD,WAAUD,iBACxC,MAAM,QAAEjB,EAAO,MAAEpG,EAAK,QAAEqG,GAAY1B,EAAOC,EAAMT,EAASmD,EAAU,CAClEjH,SAAUA,EAAWgH,EACrB9G,WACAD,YACAH,iBACAC,qBACAF,iBACAa,mBAGEqF,IACFwB,GAAa,GAGfD,GAAc3H,EAEVoG,GAAWC,IACbqB,EAAa,IAAIA,KAAerB,GAClC,IAGF,IAAI7J,EAAS,CACX4J,QAASwB,EACT5H,MAAO4H,EAAaD,EAAa1J,KAAKkJ,OAAOjK,OAAS,GAOxD,OAJI0K,GAAc1H,IAChB1D,EAAO6J,QAAUqB,GAGZlL,CACT,EAGF,MAAMqL,EACJ,WAAA9J,CAAYoG,GACVlG,KAAKkG,QAAUA,CACjB,CACA,mBAAO2D,CAAa3D,GAClB,OAAO4D,EAAS5D,EAASlG,KAAK+J,WAChC,CACA,oBAAOC,CAAc9D,GACnB,OAAO4D,EAAS5D,EAASlG,KAAKiK,YAChC,CACA,MAAAvD,GAAkB,EAGpB,SAASoD,EAAS5D,EAASgE,GACzB,MAAMC,EAAUjE,EAAQvC,MAAMuG,GAC9B,OAAOC,EAAUA,EAAQ,GAAK,IAChC,CA8JA,MAAMC,UAAmBR,EACvB,WAAA9J,CACEoG,GACA,SACE9D,EAAWb,EAAOa,SAAQ,UAC1BC,EAAYd,EAAOc,UAAS,SAC5BC,EAAWf,EAAOe,SAAQ,eAC1BL,EAAiBV,EAAOU,eAAc,eACtCC,EAAiBX,EAAOW,eAAc,mBACtCC,EAAqBZ,EAAOY,mBAAkB,gBAC9CX,EAAkBD,EAAOC,gBAAe,iBACxCC,EAAmBF,EAAOE,iBAAgB,eAC1CqB,EAAiBvB,EAAOuB,gBACtB,CAAC,GAELuH,MAAMnE,GACNlG,KAAKsK,aAAe,IAAIvB,EAAY7C,EAAS,CAC3C9D,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAX,kBACAC,mBACAqB,kBAEJ,CACA,eAAWyH,GACT,MAAO,OACT,CACA,qBAAWR,GACT,MAAO,UACT,CACA,sBAAWE,GACT,MAAO,QACT,CACA,MAAAvD,CAAOC,GACL,OAAO3G,KAAKsK,aAAad,SAAS7C,EACpC,EAKF,MAAM6D,UAAqBZ,EACzB,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,SACT,CACA,qBAAWR,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAvD,CAAOC,GACL,IACIhE,EADAP,EAAW,EAGf,MAAMgG,EAAU,GACVvB,EAAa7G,KAAKkG,QAAQjH,OAGhC,MAAQ0D,EAAQgE,EAAKU,QAAQrH,KAAKkG,QAAS9D,KAAc,GACvDA,EAAWO,EAAQkE,EACnBuB,EAAQ7H,KAAK,CAACoC,EAAOP,EAAW,IAGlC,MAAM+F,IAAYC,EAAQnJ,OAE1B,MAAO,CACLkJ,UACApG,MAAOoG,EAAU,EAAI,EACrBC,UAEJ,EAIF,MAAMqC,EAAY,CA3OlB,cAAyBb,EACvB,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,OACT,CACA,qBAAWR,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAvD,CAAOC,GACL,MAAMwB,EAAUxB,IAAS3G,KAAKkG,QAE9B,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGpI,KAAKkG,QAAQjH,OAAS,GAEvC,GAwNAuL,EAxLF,cAA+BZ,EAC7B,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,cACT,CACA,qBAAWR,GACT,MAAO,YACT,CACA,sBAAWE,GACT,MAAO,UACT,CACA,MAAAvD,CAAOC,GACL,MAAMwB,EAAUxB,EAAK+D,WAAW1K,KAAKkG,SAErC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGpI,KAAKkG,QAAQjH,OAAS,GAEvC,GAKF,cAAsC2K,EACpC,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,sBACT,CACA,qBAAWR,GACT,MAAO,aACT,CACA,sBAAWE,GACT,MAAO,WACT,CACA,MAAAvD,CAAOC,GACL,MAAMwB,GAAWxB,EAAK+D,WAAW1K,KAAKkG,SAEtC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAK1H,OAAS,GAE/B,GA+BF,cAAsC2K,EACpC,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,sBACT,CACA,qBAAWR,GACT,MAAO,aACT,CACA,sBAAWE,GACT,MAAO,WACT,CACA,MAAAvD,CAAOC,GACL,MAAMwB,GAAWxB,EAAKgE,SAAS3K,KAAKkG,SACpC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAK1H,OAAS,GAE/B,GA9CF,cAA+B2K,EAC7B,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,cACT,CACA,qBAAWR,GACT,MAAO,YACT,CACA,sBAAWE,GACT,MAAO,UACT,CACA,MAAAvD,CAAOC,GACL,MAAMwB,EAAUxB,EAAKgE,SAAS3K,KAAKkG,SAEnC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAACzB,EAAK1H,OAASe,KAAKkG,QAAQjH,OAAQ0H,EAAK1H,OAAS,GAE/D,GApGF,cAAgC2K,EAC9B,WAAA9J,CAAYoG,GACVmE,MAAMnE,EACR,CACA,eAAWqE,GACT,MAAO,eACT,CACA,qBAAWR,GACT,MAAO,WACT,CACA,sBAAWE,GACT,MAAO,SACT,CACA,MAAAvD,CAAOC,GACL,MACMwB,GAAqB,IADbxB,EAAKU,QAAQrH,KAAKkG,SAGhC,MAAO,CACLiC,UACApG,MAAOoG,EAAU,EAAI,EACrBC,QAAS,CAAC,EAAGzB,EAAK1H,OAAS,GAE/B,GAmMAmL,GAGIQ,EAAeH,EAAUxL,OAGzB4L,EAAW,qCAmDjB,MAAMC,EAAgB,IAAIC,IAAI,CAACX,EAAWG,KAAMC,EAAaD,OA8B7D,MAAMS,EACJ,WAAAlL,CACEoG,GACA,gBACE1E,EAAkBD,EAAOC,gBAAe,iBACxCC,EAAmBF,EAAOE,iBAAgB,eAC1CQ,EAAiBV,EAAOU,eAAc,mBACtCE,EAAqBZ,EAAOY,mBAAkB,eAC9CW,EAAiBvB,EAAOuB,eAAc,eACtCZ,EAAiBX,EAAOW,eAAc,SACtCE,EAAWb,EAAOa,SAAQ,UAC1BC,EAAYd,EAAOc,UAAS,SAC5BC,EAAWf,EAAOe,UAChB,CAAC,GAELtC,KAAKiL,MAAQ,KACbjL,KAAKgJ,QAAU,CACbxH,kBACAC,mBACAQ,iBACAE,qBACAD,iBACAY,iBACAV,WACAC,YACAC,YAGF4D,EAAU1E,EAAkB0E,EAAUA,EAAQ+C,cAC9C/C,EAAUzE,EAAmBiH,EAAgBxC,GAAWA,EACxDlG,KAAKkG,QAAUA,EACflG,KAAKiL,MA1GT,SAAoB/E,EAAS8C,EAAU,CAAC,GACtC,OAAO9C,EAAQ7E,MANA,KAMgB2E,KAAKb,IAClC,IAAI8F,EAAQ9F,EACTnG,OACAqC,MAAMwJ,GACNK,QAAQ/F,GAASA,KAAUA,EAAKnG,SAE/BmM,EAAU,GACd,IAAK,IAAIvI,EAAI,EAAGC,EAAMoI,EAAMhM,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CACnD,MAAMwI,EAAYH,EAAMrI,GAGxB,IAAIyI,GAAQ,EACRrJ,GAAO,EACX,MAAQqJ,KAAWrJ,EAAM4I,GAAc,CACrC,MAAMU,EAAWb,EAAUzI,GAC3B,IAAIuJ,EAAQD,EAASzB,aAAauB,GAC9BG,IACFJ,EAAQ5K,KAAK,IAAI+K,EAASC,EAAOvC,IACjCqC,GAAQ,EAEZ,CAEA,IAAIA,EAMJ,IADArJ,GAAO,IACEA,EAAM4I,GAAc,CAC3B,MAAMU,EAAWb,EAAUzI,GAC3B,IAAIuJ,EAAQD,EAAStB,cAAcoB,GACnC,GAAIG,EAAO,CACTJ,EAAQ5K,KAAK,IAAI+K,EAASC,EAAOvC,IACjC,KACF,CACF,CACF,CAEA,OAAOmC,IAEX,CAiEiBK,CAAWxL,KAAKkG,QAASlG,KAAKgJ,QAC7C,CAEA,gBAAOyC,CAAUC,EAAG1C,GAClB,OAAOA,EAAQzG,iBACjB,CAEA,QAAAiH,CAAS7C,GACP,MAAMsE,EAAQjL,KAAKiL,MAEnB,IAAKA,EACH,MAAO,CACL9C,SAAS,EACTpG,MAAO,GAIX,MAAM,eAAEE,EAAc,gBAAET,EAAe,iBAAEC,GAAqBzB,KAAKgJ,QAEnErC,EAAOnF,EAAkBmF,EAAOA,EAAKsC,cACrCtC,EAAOlF,EAAmBiH,EAAgB/B,GAAQA,EAElD,IAAIgF,EAAa,EACblC,EAAa,GACbC,EAAa,EAGjB,IAAK,IAAI9G,EAAI,EAAGgJ,EAAOX,EAAMhM,OAAQ2D,EAAIgJ,EAAMhJ,GAAK,EAAG,CACrD,MAAM6H,EAAYQ,EAAMrI,GAGxB6G,EAAWxK,OAAS,EACpB0M,EAAa,EAGb,IAAK,IAAI3D,EAAI,EAAG6D,EAAOpB,EAAUxL,OAAQ+I,EAAI6D,EAAM7D,GAAK,EAAG,CACzD,MAAMsD,EAAWb,EAAUzC,IACrB,QAAEG,EAAO,QAAEC,EAAO,MAAErG,GAAUuJ,EAAS5E,OAAOC,GAEpD,IAAIwB,EAWG,CACLuB,EAAa,EACbiC,EAAa,EACblC,EAAWxK,OAAS,EACpB,KACF,CAbE,GAFA0M,GAAc,EACdjC,GAAc3H,EACVE,EAAgB,CAClB,MAAMsI,EAAOe,EAASxL,YAAYyK,KAC9BO,EAAclH,IAAI2G,GACpBd,EAAa,IAAIA,KAAerB,GAEhCqB,EAAWlJ,KAAK6H,EAEpB,CAOJ,CAGA,GAAIuD,EAAY,CACd,IAAIpN,EAAS,CACX4J,SAAS,EACTpG,MAAO2H,EAAaiC,GAOtB,OAJI1J,IACF1D,EAAO6J,QAAUqB,GAGZlL,CACT,CACF,CAGA,MAAO,CACL4J,SAAS,EACTpG,MAAO,EAEX,EAGF,MAAM+J,EAAsB,GAM5B,SAASC,EAAe7F,EAAS8C,GAC/B,IAAK,IAAIpG,EAAI,EAAGC,EAAMiJ,EAAoB7M,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CACjE,IAAIoJ,EAAgBF,EAAoBlJ,GACxC,GAAIoJ,EAAcP,UAAUvF,EAAS8C,GACnC,OAAO,IAAIgD,EAAc9F,EAAS8C,EAEtC,CAEA,OAAO,IAAID,EAAY7C,EAAS8C,EAClC,CAEA,MAAMiD,EACC,OADDA,EAEA,MAGAC,EACE,QADFA,EAEK,OAGLC,EAAgBlB,MACjBA,EAAMgB,KAAwBhB,EAAMgB,IAOnCG,EAAqBnB,IAAU,CACnC,CAACgB,GAAsB9M,OAAOY,KAAKkL,GAAOjF,KAAKtG,IAAQ,CACrD,CAACA,GAAMuL,EAAMvL,SAMjB,SAAS2M,EAAMpB,EAAOjC,GAAS,KAAEsD,GAAO,GAAS,CAAC,GAChD,MAAMC,EAAQtB,IACZ,IAAIlL,EAAOZ,OAAOY,KAAKkL,GAEvB,MAAMuB,EAjBK,CAACvB,KAAYA,EAAMiB,GAiBVO,CAAOxB,GAE3B,IAAKuB,GAAezM,EAAKd,OAAS,IAAMkN,EAAalB,GACnD,OAAOsB,EAAKH,EAAkBnB,IAGhC,GArBW,CAACA,IACb/M,EAAQ+M,IAAUrM,EAASqM,KAAWkB,EAAalB,GAoB9CyB,CAAOzB,GAAQ,CACjB,MAAMvL,EAAM8M,EAAcvB,EAAMiB,GAAgBnM,EAAK,GAE/CmG,EAAUsG,EAAcvB,EAAMiB,GAAmBjB,EAAMvL,GAE7D,IAAKjB,EAASyH,GACZ,MAAM,IAAI9E,MAjyC2B,CAAC1B,GAC5C,yBAAyBA,IAgyCHiN,CAAqCjN,IAGvD,MAAMW,EAAM,CACVM,MAAOQ,EAAYzB,GACnBwG,WAOF,OAJIoG,IACFjM,EAAIiL,SAAWS,EAAe7F,EAAS8C,IAGlC3I,CACT,CAEA,IAAIuM,EAAO,CACTC,SAAU,GACVC,SAAU/M,EAAK,IAajB,OAVAA,EAAKK,SAASV,IACZ,MAAMvB,EAAQ8M,EAAMvL,GAEhBxB,EAAQC,IACVA,EAAMiC,SAAS+E,IACbyH,EAAKC,SAAStM,KAAKgM,EAAKpH,GAAM,GAElC,IAGKyH,GAOT,OAJKT,EAAalB,KAChBA,EAAQmB,EAAkBnB,IAGrBsB,EAAKtB,EACd,CAuBA,SAAS8B,EAAiBxO,EAAQyO,GAChC,MAAM7C,EAAU5L,EAAO4L,QACvB6C,EAAK7C,QAAU,GAEVrL,EAAUqL,IAIfA,EAAQ/J,SAASuD,IACf,IAAK7E,EAAU6E,EAAMyE,WAAazE,EAAMyE,QAAQnJ,OAC9C,OAGF,MAAM,QAAEmJ,EAAO,MAAEjK,GAAUwF,EAE3B,IAAItD,EAAM,CACR+H,UACAjK,SAGEwF,EAAMjE,MACRW,EAAIX,IAAMiE,EAAMjE,IAAIsB,KAGlB2C,EAAM3B,KAAO,IACf3B,EAAI4M,SAAWtJ,EAAM3B,KAGvBgL,EAAK7C,QAAQ5J,KAAKF,EAAI,GAE1B,CAEA,SAAS6M,EAAe3O,EAAQyO,GAC9BA,EAAKjL,MAAQxD,EAAOwD,KACtB,CAiCA,MAAMoL,EACJ,WAAArN,CAAYuE,EAAM2E,EAAU,CAAC,EAAGrG,GAC9B3C,KAAKgJ,QAAU,IAAKzH,KAAWyH,GAG7BhJ,KAAKgJ,QAAQzG,kBAMfvC,KAAKoN,UAAY,IAAIvN,EAASG,KAAKgJ,QAAQjJ,MAE3CC,KAAKqN,cAAchJ,EAAM1B,EAC3B,CAEA,aAAA0K,CAAchJ,EAAM1B,GAGlB,GAFA3C,KAAKsN,MAAQjJ,EAET1B,KAAWA,aAAiBO,GAC9B,MAAM,IAAI9B,MAv7Ca,0BA07CzBpB,KAAKuN,SACH5K,GACAmD,EAAY9F,KAAKgJ,QAAQjJ,KAAMC,KAAKsN,MAAO,CACzCrM,MAAOjB,KAAKgJ,QAAQ/H,MACpB+B,gBAAiBhD,KAAKgJ,QAAQhG,iBAEpC,CAEA,GAAA8B,CAAIJ,GACG5F,EAAU4F,KAIf1E,KAAKsN,MAAM/M,KAAKmE,GAChB1E,KAAKuN,SAASzI,IAAIJ,GACpB,CAEA,MAAA8I,CAAOC,EAAY,MAAoB,IACrC,MAAMtC,EAAU,GAEhB,IAAK,IAAIvI,EAAI,EAAGC,EAAM7C,KAAKsN,MAAMrO,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CACxD,MAAM8B,EAAM1E,KAAKsN,MAAM1K,GACnB6K,EAAU/I,EAAK9B,KACjB5C,KAAKgF,SAASpC,GACdA,GAAK,EACLC,GAAO,EAEPsI,EAAQ5K,KAAKmE,GAEjB,CAEA,OAAOyG,CACT,CAEA,QAAAnG,CAAShD,GACPhC,KAAKsN,MAAMrI,OAAOjD,EAAK,GACvBhC,KAAKuN,SAASvI,SAAShD,EACzB,CAEA,QAAA0L,GACE,OAAO1N,KAAKuN,QACd,CAEA,MAAA7G,CAAOuE,GAAO,MAAE0C,GAAQ,GAAO,CAAC,GAC9B,MAAM,eACJ1L,EAAc,aACdP,EAAY,WACZC,EAAU,OACVC,EAAM,gBACNmB,GACE/C,KAAKgJ,QAET,IAAImC,EAAU1M,EAASwM,GACnBxM,EAASuB,KAAKsN,MAAM,IAClBtN,KAAK4N,kBAAkB3C,GACvBjL,KAAK6N,kBAAkB5C,GACzBjL,KAAK8N,eAAe7C,GAYxB,OAlLJ,SACEE,GACA,gBAAEpI,EAAkBxB,EAAOwB,kBAE3BoI,EAAQ/K,SAAS7B,IACf,IAAImL,EAAa,EAEjBnL,EAAO4L,QAAQ/J,SAAQ,EAAGV,MAAKyD,OAAMpB,YACnC,MAAMtB,EAASf,EAAMA,EAAIe,OAAS,KAElCiJ,GAAclG,KAAKC,IACP,IAAV1B,GAAetB,EAASsN,OAAOC,QAAUjM,GACxCtB,GAAU,IAAMsC,EAAkB,EAAII,GACxC,IAGH5E,EAAOwD,MAAQ2H,CAAU,GAE7B,CAsJIuE,CAAa9C,EAAS,CAAEpI,oBAEpBpB,GACFwJ,EAAQ+C,KAAKtM,GAGXlD,EAASiP,IAAUA,GAAS,IAC9BxC,EAAUA,EAAQgD,MAAM,EAAGR,IAvHjC,SACExC,EACA9G,GACA,eACEpC,EAAiBV,EAAOU,eAAc,aACtCP,EAAeH,EAAOG,cACpB,CAAC,GAEL,MAAM0M,EAAe,GAKrB,OAHInM,GAAgBmM,EAAa7N,KAAKwM,GAClCrL,GAAc0M,EAAa7N,KAAK2M,GAE7B/B,EAAQnF,KAAKzH,IAClB,MAAM,IAAEyD,GAAQzD,EAEVyO,EAAO,CACX7H,KAAMd,EAAKrC,GACXiL,SAAUjL,GASZ,OANIoM,EAAanP,QACfmP,EAAahO,SAASiO,IACpBA,EAAY9P,EAAQyO,EAAK,IAItBA,IAEX,CA6FWsB,CAAOnD,EAASnL,KAAKsN,MAAO,CACjCrL,iBACAP,gBAEJ,CAEA,iBAAAkM,CAAkB3C,GAChB,MAAMK,EAAWS,EAAed,EAAOjL,KAAKgJ,UACtC,QAAE1E,GAAYtE,KAAKuN,SACnBpC,EAAU,GAmBhB,OAhBA7G,EAAQlE,SAAQ,EAAGiF,EAAGsB,EAAM/D,EAAGZ,EAAK6B,EAAGV,MACrC,IAAKrE,EAAU6H,GACb,OAGF,MAAM,QAAEwB,EAAO,MAAEpG,EAAK,QAAEqG,GAAYkD,EAAS9B,SAAS7C,GAElDwB,GACFgD,EAAQ5K,KAAK,CACX4E,KAAMwB,EACN3E,MACAmI,QAAS,CAAC,CAAEpI,QAAO5D,MAAOwI,EAAMxD,OAAMiF,aAE1C,IAGK+C,CACT,CAEA,cAAA2C,CAAe7C,GAEb,MAAMsD,EAAalC,EAAMpB,EAAOjL,KAAKgJ,SAE/BwF,EAAW,CAAC5B,EAAMzH,EAAMnD,KAC5B,IAAK4K,EAAKC,SAAU,CAClB,MAAM,MAAElM,EAAK,SAAE2K,GAAasB,EAEtBzC,EAAUnK,KAAKyO,aAAa,CAChC/O,IAAKM,KAAKoN,UAAU1M,IAAIC,GACxBxC,MAAO6B,KAAKuN,SAASrI,uBAAuBC,EAAMxE,GAClD2K,aAGF,OAAInB,GAAWA,EAAQlL,OACd,CACL,CACE+C,MACAmD,OACAgF,YAKC,EACT,CAEA,MAAMuE,EAAM,GACZ,IAAK,IAAI9L,EAAI,EAAGC,EAAM+J,EAAKC,SAAS5N,OAAQ2D,EAAIC,EAAKD,GAAK,EAAG,CAC3D,MAAM+L,EAAQ/B,EAAKC,SAASjK,GACtBrE,EAASiQ,EAASG,EAAOxJ,EAAMnD,GACrC,GAAIzD,EAAOU,OACTyP,EAAInO,QAAQhC,QACP,GAAIqO,EAAKE,WAAab,EAC3B,MAAO,EAEX,CACA,OAAOyC,GAGHpK,EAAUtE,KAAKuN,SAASjJ,QACxBsK,EAAY,CAAC,EACbzD,EAAU,GAmBhB,OAjBA7G,EAAQlE,SAAQ,EAAGkF,EAAGH,EAAMvC,EAAGZ,MAC7B,GAAIlD,EAAUqG,GAAO,CACnB,IAAI0J,EAAaL,EAASD,EAAYpJ,EAAMnD,GAExC6M,EAAW5P,SAER2P,EAAU5M,KACb4M,EAAU5M,GAAO,CAAEA,MAAKmD,OAAMgF,QAAS,IACvCgB,EAAQ5K,KAAKqO,EAAU5M,KAEzB6M,EAAWzO,SAAQ,EAAG+J,cACpByE,EAAU5M,GAAKmI,QAAQ5J,QAAQ4J,EAAQ,IAG7C,KAGKgB,CACT,CAEA,iBAAA0C,CAAkB5C,GAChB,MAAMK,EAAWS,EAAed,EAAOjL,KAAKgJ,UACtC,KAAEjJ,EAAI,QAAEuE,GAAYtE,KAAKuN,SACzBpC,EAAU,GA8BhB,OA3BA7G,EAAQlE,SAAQ,EAAGkF,EAAGH,EAAMvC,EAAGZ,MAC7B,IAAKlD,EAAUqG,GACb,OAGF,IAAIgF,EAAU,GAGdpK,EAAKK,SAAQ,CAACV,EAAK6F,KACjB4E,EAAQ5J,QACHP,KAAKyO,aAAa,CACnB/O,MACAvB,MAAOgH,EAAKI,GACZ+F,aAEH,IAGCnB,EAAQlL,QACVkM,EAAQ5K,KAAK,CACXyB,MACAmD,OACAgF,WAEJ,IAGKgB,CACT,CACA,YAAAsD,EAAa,IAAE/O,EAAG,MAAEvB,EAAK,SAAEmN,IACzB,IAAKxM,EAAUX,GACb,MAAO,GAGT,IAAIgM,EAAU,GAEd,GAAIjM,EAAQC,GACVA,EAAMiC,SAAQ,EAAGiF,EAAGsB,EAAM/D,EAAGZ,EAAK6B,EAAGV,MACnC,IAAKrE,EAAU6H,GACb,OAGF,MAAM,QAAEwB,EAAO,MAAEpG,EAAK,QAAEqG,GAAYkD,EAAS9B,SAAS7C,GAElDwB,GACFgC,EAAQ5J,KAAK,CACXwB,QACArC,MACAvB,MAAOwI,EACP3E,MACAmB,OACAiF,WAEJ,QAEG,CACL,MAAQ/C,EAAGsB,EAAM9C,EAAGV,GAAShF,GAEvB,QAAEgK,EAAO,MAAEpG,EAAK,QAAEqG,GAAYkD,EAAS9B,SAAS7C,GAElDwB,GACFgC,EAAQ5J,KAAK,CAAEwB,QAAOrC,MAAKvB,MAAOwI,EAAMxD,OAAMiF,WAElD,CAEA,OAAO+B,CACT,EAGFgD,EAAK2B,QAAU,QACf3B,EAAKrH,YAAcA,EACnBqH,EAAK4B,WAnyCL,SACE/B,GACA,MAAE/L,EAAQM,EAAON,MAAK,gBAAE+B,EAAkBzB,EAAOyB,iBAAoB,CAAC,GAEtE,MAAM,KAAEjD,EAAI,QAAEuE,GAAY0I,EACpBjH,EAAU,IAAI7C,EAAU,CAAEjC,QAAO+B,oBAGvC,OAFA+C,EAAQxB,QAAQxE,GAChBgG,EAAQ5B,gBAAgBG,GACjByB,CACT,EA2xCAoH,EAAK6B,OAASzN,EAGZ4L,EAAK3B,WAAaa,EApcpB,YAAqB4C,GACnBnD,EAAoBvL,QAAQ0O,EAC9B,CAscEC,CAASlE,G,wBCrpDX,OAhGmBmE,IAAmB,IAAlB,SAAE/M,GAAU+M,EAC9B,MAAM,EAAClE,EAAM,EAACmE,IAAYC,EAAAA,EAAAA,UAAS,KAC7B,EAAClE,EAAQ,EAACmE,IAAcD,EAAAA,EAAAA,UAAS,KACjC,EAACE,EAAW,EAACC,IAAiBH,EAAAA,EAAAA,UAAS,KAG7CI,EAAAA,EAAAA,YAAU,KACR,MACMC,EADS,IAAIC,gBAAgBvN,EAASsE,QACrBhG,IAAI,YAAc,GACzC0O,EAASM,EAAQ,GAChB,CAACtN,EAASsE,UAGb+I,EAAAA,EAAAA,YAAU,KACRG,MAAM,sBACHC,MAAKnB,GAAOA,EAAIoB,SAChBD,MAAK7C,IACJwC,EAAcxC,EAAK,IAEpB+C,OAAMC,IACLC,QAAQC,MAAM,8BAA+BF,EAAI,GACjD,GACH,IAGH,MAAMG,GAAOC,EAAAA,EAAAA,UACX,IACE,IAAIjD,EAAKoC,EAAY,CACnBxP,KAAM,CAAC,QAAS,cAAe,OAAQ,QACvCsC,UAAW,MAEf,CAACkN,KAIHE,EAAAA,EAAAA,YAAU,KACR,IAAKxE,EAEH,YADAqE,EAAW,IAGb,MAAMe,EAAcF,EAAKzJ,OAAOuE,GAChCqE,EAAWe,EAAYrK,KAAIsK,GAAKA,EAAEnL,OAAM,GACvC,CAAC8F,EAAOkF,IAkBX,OACEI,EAAAA,cAACC,EAAAA,EAAM,CAACpO,SAAUA,GAChBmO,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,OAAKE,UCrEkB,yCDsErBF,EAAAA,cAAA,UAAQhG,KAAK,SAASkG,UCvEJ,sCDuEoC,MAGtDF,EAAAA,cAAA,SACEhG,KAAK,OACL/J,GAAG,cACHrC,MAAO8M,EACPyF,SA1BkBC,IACxB,MAAMC,EAAMD,EAAEE,OAAO1S,MACrBiR,EAASwB,GAGT,MAAME,EAAS,IAAInB,gBAAgBvN,EAASsE,QACxCkK,EACFE,EAAO9M,IAAI,UAAW4M,GAEtBE,EAAOC,OAAO,WAEhB,MAAMC,EAAS,WAAWF,EAAOzR,aACjC4R,OAAOC,QAAQC,aAAa,CAAC,EAAG,GAAIH,EAAO,EAerCI,YAAY,WACZX,UC9Ee,uCDkFnBF,EAAAA,cAAA,OAAKE,UCrFW,kCDsFbtF,EAAQnF,KAAIqL,GACXd,EAAAA,cAACe,EAAAA,EAAQ,CACP5R,IAAK2R,EAAKE,KACVF,KAAM,CACJE,KAAMF,EAAKE,KACXC,MAAOH,EAAKG,MACZC,KAAMJ,EAAKI,KACXC,KAAML,EAAKK,KACXC,YAAaN,EAAKM,YAClBC,cAAeP,EAAKO,oBAKrB,C","sources":["webpack://gatsby-starter-blog/./node_modules/fuse.js/dist/fuse.mjs","webpack://gatsby-starter-blog/./src/pages/search.js","webpack://gatsby-starter-blog/./src/styles/search.module.css"],"sourcesContent":["/**\n * Fuse.js v7.1.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2025 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When `true`, the algorithm will ignore diacritics (accents) in comparisons\n  ignoreDiacritics: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nconst stripDiacritics = String.prototype.normalize\n    ? ((str) => str.normalize('NFD').replace(/[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/g, ''))\n    : ((str) => str);\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, ignoreDiacritics, includeMatches } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      ignoreDiacritics,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive, ignoreDiacritics } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.1.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","// src/pages/search.js\n\nimport React, { useEffect, useMemo, useState } from \"react\"\nimport Fuse from \"fuse.js\"\nimport Layout from \"../components/layout\"\nimport PostItem from \"../components/post-item\"\n\nimport * as styles from \"../styles/search.module.css\"\n\nconst SearchPage = ({ location }) => {\n  const [query, setQuery] = useState(\"\")\n  const [results, setResults] = useState([])\n  const [searchData, setSearchData] = useState([])\n\n  // URL クエリパラメータから keyword を取得\n  useEffect(() => {\n    const params = new URLSearchParams(location.search)\n    const keyword = params.get(\"keyword\") || \"\"\n    setQuery(keyword)\n  }, [location.search])\n\n  // 検索インデックスをロード\n  useEffect(() => {\n    fetch(\"/search-index.json\")\n      .then(res => res.json())\n      .then(data => {\n        setSearchData(data)\n      })\n      .catch(err => {\n        console.error(\"Failed to load search data:\", err)\n      })\n  }, [])\n\n  // Fuse.js インスタンス\n  const fuse = useMemo(\n    () =>\n      new Fuse(searchData, {\n        keys: [\"title\", \"description\", \"tags\", \"body\"],\n        threshold: 0.5, // 0に近いほど厳密、1.0に近いほど緩い\n      }),\n    [searchData]\n  )\n\n  // query が変化したら検索を実行\n  useEffect(() => {\n    if (!query) {\n      setResults([])\n      return\n    }\n    const fuseResults = fuse.search(query)\n    setResults(fuseResults.map(r => r.item))\n  }, [query, fuse])\n\n  // ユーザー入力 -> URL に反映\n  const handleInputChange = e => {\n    const val = e.target.value\n    setQuery(val)\n\n    // URLクエリを書き換える\n    const params = new URLSearchParams(location.search)\n    if (val) {\n      params.set(\"keyword\", val)\n    } else {\n      params.delete(\"keyword\")\n    }\n    const newUrl = `/search?${params.toString()}`\n    window.history.replaceState({}, \"\", newUrl)\n  }\n\n  return (\n    <Layout location={location}>\n      <h1>Search</h1>\n      <div className={styles.searchContainer}>\n        <button type=\"submit\" className={styles.searchButton}>\n          🔍\n        </button>\n        <input\n          type=\"text\"\n          id=\"searchInput\"\n          value={query}\n          onChange={handleInputChange}\n          placeholder=\"キーワードで検索\"\n          className={styles.searchInput}\n        />\n      </div>\n\n      <div className={styles.postList}>\n        {results.map(post => (\n          <PostItem\n            key={post.slug}\n            post={{\n              slug: post.slug,\n              title: post.title,\n              date: post.date,\n              tags: post.tags,\n              description: post.description,\n              featuredImage: post.featuredImage,\n            }}\n          />\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport default SearchPage\n","// extracted by mini-css-extract-plugin\nexport var postList = \"search-module--postList--3614f\";\nexport var searchButton = \"search-module--searchButton--e77d5\";\nexport var searchContainer = \"search-module--searchContainer--3e886\";\nexport var searchInput = \"search-module--searchInput--dcb87\";"],"names":["isArray","value","Array","getTag","INFINITY","result","baseToString","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","isBlank","trim","length","undefined","Object","prototype","toString","call","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","key","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","obj","createKey","push","id","weight","get","keyId","toJSON","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","split","join","Config","isCaseSensitive","ignoreDiacritics","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","list","arr","deepGet","index","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","indices","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","stripDiacritics","String","normalize","str","replace","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","type","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","parseQuery","condition","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","parseIndex","config","args","register","_ref","setQuery","useState","setResults","searchData","setSearchData","useEffect","keyword","URLSearchParams","fetch","then","json","catch","err","console","error","fuse","useMemo","fuseResults","r","React","Layout","className","onChange","e","val","target","params","delete","newUrl","window","history","replaceState","placeholder","post","PostItem","slug","title","date","tags","description","featuredImage"],"sourceRoot":""}